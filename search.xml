<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>生信分析-4</title>
      <link href="/2020/05/11/43420.html"/>
      <url>/2020/05/11/43420.html</url>
      
        <content type="html"><![CDATA[<h1 id="RNA-seq-pipeline"><a href="#RNA-seq-pipeline" class="headerlink" title="RNA-seq pipeline"></a>RNA-seq pipeline</h1><a id="more"></a><h2 id="数据分析流程"><a href="#数据分析流程" class="headerlink" title="数据分析流程"></a>数据分析流程</h2><ol><li>原始数据</li><li>数据质控</li><li>比对质控数据</li><li>比对上的数据的下游分析 – <code>基因表达差异分析</code>、<code>基因可变剪切</code>、<code>SNP/INDEL分析</code></li></ol><h2 id="软件安装-针对MAC系统"><a href="#软件安装-针对MAC系统" class="headerlink" title="软件安装(针对MAC系统)"></a>软件安装(针对MAC系统)</h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/35711429" target="_blank" rel="noopener">用Anaconda快速搭建生物信息学分析平台</a></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li><p>下载fastq文件<code>.fa</code></p></li><li><p>在终端输入以下命令</p><p>  <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gejsw627yxj30q0012gm4.jpg" alt=""></p><blockquote><p>raw _data 是fastq文件所在目录, 一般是压缩格式</p><p>-q 是输出结果</p><p>-t 4 是调用Mac电脑的4个核心跑数据, 注意自己电脑的CPU有几个核, 跑数据的核不能超过电脑的</p><p>-o 表示输出结果到哪个目录, 后接目录路径</p><p>~/FastQC_result/raw/ 表示将结果输出到此目录下</p><p>*.fq.gz 表示此目录下所有需要质控的fastq文件</p></blockquote></li><li><p>输出的结果</p>  <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gejt3s26e0j30oi06ytbz.jpg" style="zoom:50%;" /></li><li><p>查看质控报告 – 点击一个html文件</p>  <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gejta6f000j30m80gojsb.jpg" style="zoom:50%;" /><p>  <strong>注意:</strong> 这是其中一个图, 报告怎么看点击<a href="https://zhuanlan.zhihu.com/p/20731723" target="_blank" rel="noopener">fastqc report</a></p><ol><li><p><strong>针对报告结果去除不正常的碱基</strong></p><blockquote><pre class=" language-text"><code class="language-text">$ fastx_trimmer [-h] [-f N] [-l N] [-z] [-v] [-i INFILE] [-o OUTFILE][-h] = 获得帮助信息.[-f N] = 序列中从第几个碱基开始保留. 默认是1.[-l N] = 序列最后保留到多少个碱基，默认是整条序列全部保留.[-z] = 调用GZip软件，输出的文件自动经过压缩.</code></pre></blockquote><pre class=" language-shell"><code class="language-shell">zcat hela_ctrl_rep1_R1.fq.gz | fastx_trimmer -z -o hela_ctrl_rep1_R2_trimmer2.fq.gz -f 11 -l 140</code></pre><p>==以上命令总是报错==</p><p>该用下列方法</p></li></ol><ul><li><p>先对<code>.fa.gz</code>文件解压缩</p><pre class=" language-shell"><code class="language-shell">   gzip -d hela_ctrl_rep1_R2.fq.gz  # hela_ctrl_rep1_R2.fq.gz是文件名</code></pre></li><li><p>再用<code>fasts_trimmer</code>命令</p><pre class=" language-shell"><code class="language-shell">  fastx_trimmer -i hela_ctrl_rep1_R2.fq -z  -o hela_ctrl_rep1_R2_trimmer.fq.gz -f 11 -l 140</code></pre></li></ul><ol start="2"><li><p><strong>去除reads两端的adapter</strong></p><pre class=" language-shell"><code class="language-shell">cutadapt --times 1 -e 0.1 -0 3 --quality-cutoff 6 -m 50 -a AGATCGGAAGAGC -A AGATCGGAAGAGC -o hela_ctrl_rep1_R1_trimmer_adapt.fq.gz -p hela_ctrl_rep1_R2_trimmer_adapt.fq.gz hela_ctrl_rep1_R1_trimmer.fq.gz hela_ctrl_rep1_R2_trimmer.fq.gz</code></pre></li></ol><p>  <strong>报错</strong></p><p>  <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gekagxjz6lj30vc07ujvv.jpg" alt=""></p><p>  *<em>注意: *</em> 上述<code>-0 3</code>命令写错了, 应该是大写的<code>O</code></p><pre class=" language-shell"><code class="language-shell">  cutadapt --times 1 -e 0.1 -O 3 --quality-cutoff 6 -m 50 -a AGATCGGAAGAGC -A AGATCGGAAGAGC -o hela_ctrl_rep1_R1_trimmer_adapt.fq.gz -p hela_ctrl_rep1_R2_trimmer_adapt.fq.gz hela_ctrl_rep1_R1_trimmer.fq.gz hela_ctrl_rep1_R2_trimmer.fq.gz</code></pre><blockquote><p>–times 1 表示对每条reads进行一次cutadapt</p><p>-e 0.1 表示允许adapt结果与测序序列相比有10%的错误率</p><p>-O 3   表示adapt结果必须与测序序列有3个碱基以上的overlap</p><p>–quality-cutoff 6  是常用指标</p><p>-m 50 adapt后base 数低于50的丢弃</p><p>-a AGATCGGAAGAGC 对应reads1 的通用引物</p><p>-A AGATCGGAAGAGC 对应reads2 的通用引物</p><p>-o  输出目录</p></blockquote></li><li><p>比对rRNA index(<strong>就是rRNA的文件索引</strong>)</p><ul><li><p>比对不上的序列才能留下来 – 转录组</p></li><li><p>关于如何下载<code>参考基因组</code>构成<code>index</code>文件, 请参考<a href="https://www.bilibili.com/video/BV1Ax411p758" target="_blank" rel="noopener">相关视频</a></p></li><li><p>构建index命令</p><pre class=" language-shell"><code class="language-shell">  # 先解压缩下载的fa.gz文件  # 再合并解压缩后的文件  cat chr1.fa chr2.fa ... > mm10_genome.fa  # 建立index  bowtie2-build ./mm10_genome.fa ./mm10_genome_bowtie2_index &  # ./mm10_genome.fa输入文件, ./mm10_genome_bowtie2_index输出文件</code></pre><ul><li><p>比对</p><pre class=" language-shell"><code class="language-shell">nohup bowtie2 -x rRNA_index -1 hela_ctrl_rep1_R1_trimmer_adapt.fq.gz -2 hela_ctrl_rep1_R2_trimmer_adapt.fq.gz -S $sam_out -p 3 --un-conc-gz $fastq_unmap > $log 2>&1 &</code></pre><blockquote><p>bowtie2 - x rRNA_index  是rRNA的索引文件, 也就是rRNA的参考序列</p><p>-1 hela_ctrl_rep1_R1_trimmer_adapt.fq.gz 是reads1 trimmer后的结果</p><p>-2 hela_ctrl_rep1_R2_trimmer_adapt.fq.gz 是reads2 trimmer后的结果</p><p>-S $sam_out 表示比对结果的输出文件</p><p><strong>nohup表示在后台一直运行,即使退出程序</strong></p><p>-p 3 表示用3个cpu核心跑数据</p><p>–un-conc-gz 表示比对不上rRNA的结果, 也就是转录组</p><p>$fastq_unmap 将结果输出到此目录里</p><p>*<em>&gt; $log 2&gt;&amp;1 &amp;  将错误信息输出到日志文件里, 2表示标准错误流,错误信息, 1表示标准输出流,输出到屏幕 *</em> 最后一个&amp;表示后台运行</p></blockquote></li></ul></li></ul></li><li><p>比对到参考基因组序列</p><pre class=" language-shell"><code class="language-shell">  nohup tophat2 -p 3 -o output_dir/ $hg19_index un-conc-mate.1 un-conc-mate.2</code></pre><blockquote><p>-p 3 表示用3个cpu核心跑数据</p><p>-o output_dir 表示输出结果到此目录里</p><p>$hg19_index 表示之前建立的基因组index文件</p><p>un-conc-mate.1 un-conc-mate.2 表示没有比对上rRNA上的数据,也就是转录组数据</p></blockquote></li><li><p>计算FPKM值</p><pre class=" language-shell"><code class="language-shell">  cufflinks -o cufflinks_dir -p 3 -G /Users/zhangzhongnan/Downloads/RefSeq_genes_hg19.gtf ./*.bam</code></pre><blockquote><p>-o cufflinks_dir 输出到此目录里</p><p>-p 3 表示用3个cpu核心跑数据</p><p>-G /Users/zhangzhongnan/Downloads/RefSeq_genes_hg19.gtf 表示转录组文件, 如何下载请Google</p><p>./*.bam表示之前比对后的结果</p></blockquote></li><li><p>发现差异基因表达</p><pre class=" language-shell"><code class="language-shell">nohup cuffdiff -o $out_dir -p 4 --labels $label --min-reps-js-test 2 $hg19_gtf $ctrl_bam $treat_bam </code></pre><p></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> bioinfo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生信分析基础-1</title>
      <link href="/2020/05/10/42118.html"/>
      <url>/2020/05/10/42118.html</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 生信基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生信分析_3</title>
      <link href="/2020/05/06/52217.html"/>
      <url>/2020/05/06/52217.html</url>
      
        <content type="html"><![CDATA[<h1 id="Basic-analysis"><a href="#Basic-analysis" class="headerlink" title="Basic analysis"></a>Basic analysis</h1><a id="more"></a><h2 id="Blast"><a href="#Blast" class="headerlink" title="Blast"></a>Blast</h2><h2 id="Conservation-Analysis"><a href="#Conservation-Analysis" class="headerlink" title="Conservation Analysis"></a>Conservation Analysis</h2><p>详情参见<a href="https://lulab2.gitbook.io/teaching/part-ii.-basic-analyses/2.conservation-analysis" target="_blank" rel="noopener">conservation analysis</a></p><blockquote><h1 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h1><ul><li>按照 <a href="">0) Files Needed </a>所示下载准备好的作业文件（NPF.fa），里面是几种代表性作物的NPF家族部分基因的CDS序列集合。请根据操作流程的指示，使用距离法、最大简约法和最大似然法进行系统发育树（1000 Bootstrap）的构建，并以PDF或图片的形式保留最终结果。</li><li>自行查阅相关资料，回答下列问题：</li></ul><p>（1）试结合最终结果，解释original tree和Bootstrap consensus tree之间的区别；</p><p>（2）从构建原理的角度，简单解释不同构建方法所需时间有较大差异的原因。</p><p>（3）以同样的方法分析同样的数据，所产生的树有可能存在不同吗？为什么？</p></blockquote><h2 id="Function-Analysis"><a href="#Function-Analysis" class="headerlink" title="Function Analysis"></a>Function Analysis</h2>]]></content>
      
      
      <categories>
          
          <category> bioinfo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_24</title>
      <link href="/2020/05/05/26593.html"/>
      <url>/2020/05/05/26593.html</url>
      
        <content type="html"><![CDATA[<h1 id="jupter-notebook-–-python"><a href="#jupter-notebook-–-python" class="headerlink" title="jupter notebook – python"></a>jupter notebook – python</h1><a id="more"></a><p>使用Jupiter notebook 操作 以下python命令, 详见<a href="https://lulab2.gitbook.io/teaching/part-i.-basic-skills/4.python#1-5-swap-values" target="_blank" rel="noopener">lu_lab_tutorial</a></p><p><strong>输出为</strong></p><p><a href="File:///Users/zhangzhongnan/Downloads/Untitled1.html">结果</a></p><h2 id="Python的列表推导式，字典推导式，集合推导式使用方法"><a href="#Python的列表推导式，字典推导式，集合推导式使用方法" class="headerlink" title="Python的列表推导式，字典推导式，集合推导式使用方法"></a>Python的列表推导式，字典推导式，集合推导式使用方法</h2><p>详见<a href="https://www.cnblogs.com/cenyu/p/5718410.html" target="_blank" rel="noopener">Python的列表推导式，字典推导式，集合推导式使用方法</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>R_基础1</title>
      <link href="/2020/05/05/59159.html"/>
      <url>/2020/05/05/59159.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>详见<a href="https://lulab2.gitbook.io/teaching/part-i.-basic-skills/3.r/3.1.r-basics" target="_blank" rel="noopener">R basics</a></p><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><blockquote><p>用R语言实现以下的任务描述，作业提交一个word文档，包含实现下列步骤的R代码和每一步输出结果的截图。</p><ul><li>安装vcd包（一个用于可视化类别数据的包）</li><li>列出此包中可用的函数和数据集。</li><li>载入这个包并阅读数据集Arthritis的描述。</li><li>显示数据集Arthritis的内容（直接输入一个对象的名称将列出它的内容）。</li><li>运行数据集Arthritis自带的示例（尝试用example命令）。</li></ul></blockquote><ul><li><p><strong>代码实现步骤</strong></p><pre class=" language-R"><code class="language-R">  help.start()               #1.打开帮助文档首页  install.packages("vcd")    #2.安装包"vcd"  help(package="vcd")        #3.列出此包中的函数和数据集  library(vcd)               #4.载入包vcd  Arthritis                  #5.显示数据集Arthritis的描述及数据数值  example(Arthritis)         #6.运行数据集Arthritis自带示例  q()                        #7.退出</code></pre></li></ul><pre><code>* 安装`vcd`包    &lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gehduw7vwzj31c00u0qv5.jpg&quot; style=&quot;zoom: 25%;&quot; /&gt;* 安装此包中的函数和数据集    &lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gehe0bl57mj31c00u0u0x.jpg&quot; style=&quot;zoom: 25%;&quot; /&gt;* 载入包vcd    ![](https://tva1.sinaimg.cn/large/007S8ZIlly1gehe33rfvpj307u02yt8u.jpg)* 显示数据集Arthritis的描述及数据数值    &lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gehe5fphrhj30fo11ytek.jpg&quot; style=&quot;zoom:33%;&quot; /&gt;* 运行数据集Arthritis自带示例    ​                         &lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gehitgpb36j31360h2mzd.jpg&quot; style=&quot;zoom: 33%;&quot; /&gt;   </code></pre><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gehiwvisfwj30mg0fcgm5.jpg" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生信分析_2</title>
      <link href="/2020/05/03/2872.html"/>
      <url>/2020/05/03/2872.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-Bash"><a href="#Linux-Bash" class="headerlink" title="Linux Bash"></a>Linux Bash</h1><blockquote><p>在介绍bash之前，需要先介绍它的起源——shell。shell俗称壳，它是指UNIX系统下的一个命令解析器；主要用于用户和系统的交互; bash，全称为Bourne-Again Shell。它是一个为GNU项目编写的Unix shell</p></blockquote><a id="more"></a><p>详见<a href="https://lulab2.gitbook.io/teaching/part-i.-basic-skills/2.linux/2.3.linux-bash" target="_blank" rel="noopener">linux bash</a></p><ul><li><p><strong>echo 参数</strong></p><p>  echo -e 处理特殊字符</p><blockquote><p>若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：<br>\a 发出警告声；<br>\b 删除前一个字符；<br>\c 最后不加上换行符号；<br>\f 换行但光标仍旧停留在原来的位置；<br>\n 换行且光标移至行首；<br>\r 光标移至行首，但不换行；<br>\t 插入tab；<br>\v 与\f相同；<br>\ 插入\字符；<br>\nnn 插入nnn（八进制）所代表的ASCII字符；</p></blockquote></li><li><p><strong>${ }</strong></p><p>  关于linux shell 中<code>$</code>的用法详见<a href="https://blog.csdn.net/x1269778817/article/details/46535729" target="_blank" rel="noopener">$</a> &amp; <a href="https://man.linuxde.net/shell-script/shell-7" target="_blank" rel="noopener">切分文件名提取文件扩展名或提取文件名</a></p><p>  示例</p><pre class=" language-shell"><code class="language-shell">  $ A=B  $ echo $AB  原本是打算先将 $A 的结果替换出来，然后再补一个 B 字母于其后，  但在命令行上，真正的结果却是只会提换变量名称为 AB 的值出来…  若使用 ${ } 就没问题了：  $ echo ${A}B  BB</code></pre><pre class=" language-shell"><code class="language-shell">  #!/bin/bash  #提取文件名，删除后缀。  file_name="text.gif"  name=${file_name%.*}  echo file name is: $name  输出结果：  file name is: test</code></pre></li><li><p><strong>if判断语句</strong></p><blockquote><p><strong>示例：</strong> 提示用户输入值。若输入的值小于0，则输出“negtive number”；若等于0,则输出“number zero”，否则，输出“positive number”。</p></blockquote><pre class=" language-shell"><code class="language-shell">  #!/bin/bash  # 提示用户输入一个值  echo -n "please input a number:"  # 保存用户输入的值到num中  read num  if [ "$num" -lt "0" ];then  # 小于0,则输出“negtive number”  echo "negtive number"  elif [ "$num" -gt "0" ];then  # 大于0,则输出“positive number”  echo "positive number"  else  # 大于0,则输出"number zero"  echo "number zero"  fi  exit 0</code></pre><p>  <strong>注意:</strong> []中的语句一定要与中括号两端有空格, 否则会报错</p></li></ul><ul><li><p><strong>for循环</strong></p><ul><li><p><strong>基本格式</strong></p><blockquote><p>for 变量名in列表</p><p>do </p><p>命令1 </p><p>命令2… </p><p>done</p></blockquote><p>  <strong>格式说明</strong></p><p>当变量值在列表里, for循环即执行一次所有命令,使用变量名访问列表中取值。命令可为任何有效的 shell命令和语句。变量名为任何单词。 in列表用法是可选的,如果不用它, for循环使用命 令行的位置参数。</p></li></ul><ul><li><p><strong>示例：</strong></p><p>  输入当前文件夹的一级子目录中文件名字。</p></li></ul></li></ul><pre class=" language-shell"><code class="language-shell">#!/bin/bash# 将ls的结果保存到变量CUR_DIR中CUR_DIR=`ls`# 显示ls的结果echo $CUR_DIRfor val in $CUR_DIRdo# 若val是文件，则输出该文件名if [ -f $val ];thenecho "FILE: $val"fidoneexit 0</code></pre><p><strong>注意:</strong> <code>ls</code>中的引号是反引号<strong>``</strong></p><ul><li><p><strong>使用break和continue控制循环</strong></p><ul><li><p>基本格式</p><blockquote><p>break命令允许跳出循环。 continue命令类似于 break命令,只有一点重要差别,它不会跳出循环,只是跳过这个循环步</p></blockquote></li><li><p><strong>示例：</strong> </p><pre><code> 从0开始逐步递增，当数值等于5时，停止递增。Bash脚本内容如下：</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> bioinfo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生信分析_1</title>
      <link href="/2020/05/03/2680.html"/>
      <url>/2020/05/03/2680.html</url>
      
        <content type="html"><![CDATA[<h1 id="practice-guide-linux"><a href="#practice-guide-linux" class="headerlink" title="practice guide - linux"></a>practice guide - linux</h1><blockquote><p>本章内容主要是学会用Linux的一些简单编程方法去查看GTF/GFF基因组注释文件的基本信息，并学会对文件中数据进行提取，利用提取到的数据计算特定feature（例如计算基因积累长度等）。</p></blockquote><a id="more"></a><p>详见<a href="https://lulab2.gitbook.io/teaching/part-i.-basic-skills/2.linux/2.2.linux-practice-guide" target="_blank" rel="noopener">practice guide</a></p><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a><strong>Homework</strong></h2><ul><li><p>列出1.gtf文件中 XI 号染色体上的后 10 个 CDS （按照每个CDS终止位置的基因组坐标进行sort）</p><p>  <strong>代码实现</strong></p><pre class=" language-shell"><code class="language-shell">  grep CDS 1.gtf |awk '$1 == "XI"' | sort -t $'\t' -k 5 | tail</code></pre><p>  ==注意:$ 会将’\t’转置为TAB分隔符, -k 5是按照第五列也就是CDS终止位置进行排序==</p></li></ul><pre><code>`输出结果为````shellXI    ensembl    CDS    82947    82998    .    +    0    gene_id &quot;YKL190W&quot;; gene_version &quot;1&quot;; transcript_id &quot;YKL190W&quot;; transcript_version &quot;1&quot;; exon_number &quot;1&quot;; gene_name &quot;CNB1&quot;; gene_source &quot;ensembl&quot;; gene_biotype &quot;protein_coding&quot;; transcript_name &quot;CNB1&quot;; transcript_source &quot;ensembl&quot;; transcript_biotype &quot;protein_coding&quot;; protein_id &quot;YKL190W&quot;; protein_version &quot;1&quot;;XI    ensembl    CDS    83075    83547    .    +    1    gene_id &quot;YKL190W&quot;; gene_version &quot;1&quot;; transcript_id &quot;YKL190W&quot;; transcript_version &quot;1&quot;; exon_number &quot;2&quot;; gene_name &quot;CNB1&quot;; gene_source &quot;ensembl&quot;; gene_biotype &quot;protein_coding&quot;; transcript_name &quot;CNB1&quot;; transcript_source &quot;ensembl&quot;; transcript_biotype &quot;protein_coding&quot;; protein_id &quot;YKL190W&quot;; protein_version &quot;1&quot;;XI    ensembl    CDS    84704    85900    .    +    0    gene_id &quot;YKL189W&quot;; gene_version &quot;1&quot;; transcript_id &quot;YKL189W&quot;; transcript_version &quot;1&quot;; exon_number &quot;1&quot;; gene_name &quot;HYM1&quot;; gene_source &quot;ensembl&quot;; gene_biotype &quot;protein_coding&quot;; transcript_name &quot;HYM1&quot;; transcript_source &quot;ensembl&quot;; transcript_biotype &quot;protein_coding&quot;; protein_id &quot;YKL189W&quot;; protein_version &quot;1&quot;;XI    ensembl    CDS    86228    88786    .    -    0    gene_id &quot;YKL188C&quot;; gene_version &quot;1&quot;; transcript_id &quot;YKL188C&quot;; transcript_version &quot;1&quot;; exon_number &quot;1&quot;; gene_name &quot;PXA2&quot;; gene_source &quot;ensembl&quot;; gene_biotype &quot;protein_coding&quot;; transcript_name &quot;PXA2&quot;; transcript_source &quot;ensembl&quot;; transcript_biotype &quot;protein_coding&quot;; protein_id &quot;YKL188C&quot;; protein_version &quot;1&quot;;XI    ensembl    CDS    89287    91536    .    -    0    gene_id &quot;YKL187C&quot;; gene_version &quot;1&quot;; transcript_id &quot;YKL187C&quot;; transcript_version &quot;1&quot;; exon_number &quot;1&quot;; gene_source &quot;ensembl&quot;; gene_biotype &quot;protein_coding&quot;; transcript_name &quot;YKL187C&quot;; transcript_source &quot;ensembl&quot;; transcript_biotype &quot;protein_coding&quot;; protein_id &quot;YKL187C&quot;; protein_version &quot;1&quot;;XI    ensembl    CDS    92747    93298    .    -    0    gene_id &quot;YKL186C&quot;; gene_version &quot;1&quot;; transcript_id &quot;YKL186C&quot;; transcript_version &quot;1&quot;; exon_number &quot;1&quot;; gene_name &quot;MTR2&quot;; gene_source &quot;ensembl&quot;; gene_biotype &quot;protein_coding&quot;; transcript_name &quot;MTR2&quot;; transcript_source &quot;ensembl&quot;; transcript_biotype &quot;protein_coding&quot;; protein_id &quot;YKL186C&quot;; protein_version &quot;1&quot;;XI    ensembl    CDS    94499    96262    .    +    0    gene_id &quot;YKL185W&quot;; gene_version &quot;1&quot;; transcript_id &quot;YKL185W&quot;; transcript_version &quot;1&quot;; exon_number &quot;1&quot;; gene_name &quot;ASH1&quot;; gene_source &quot;ensembl&quot;; gene_biotype &quot;protein_coding&quot;; transcript_name &quot;ASH1&quot;; transcript_source &quot;ensembl&quot;; transcript_biotype &quot;protein_coding&quot;; protein_id &quot;YKL185W&quot;; protein_version &quot;1&quot;;XI    ensembl    CDS    96757    98154    .    +    0    gene_id &quot;YKL184W&quot;; gene_version &quot;1&quot;; transcript_id &quot;YKL184W&quot;; transcript_version &quot;1&quot;; exon_number &quot;1&quot;; gene_name &quot;SPE1&quot;; gene_source &quot;ensembl&quot;; gene_biotype &quot;protein_coding&quot;; transcript_name &quot;SPE1&quot;; transcript_source &quot;ensembl&quot;; transcript_biotype &quot;protein_coding&quot;; protein_id &quot;YKL184W&quot;; protein_version &quot;1&quot;;XI    ensembl    CDS    98398    98607    .    -    0    gene_id &quot;YKL183C-A&quot;; gene_version &quot;1&quot;; transcript_id &quot;YKL183C-A&quot;; transcript_version &quot;1&quot;; exon_number &quot;1&quot;; gene_source &quot;ensembl&quot;; gene_biotype &quot;protein_coding&quot;; transcript_name &quot;YKL183C-A&quot;; transcript_source &quot;ensembl&quot;; transcript_biotype &quot;protein_coding&quot;; protein_id &quot;YKL183C-A&quot;; protein_version &quot;1&quot;;XI    ensembl    CDS    98721    99638    .    +    0    gene_id &quot;YKL183W&quot;; gene_version &quot;1&quot;; transcript_id &quot;YKL183W&quot;; transcript_version &quot;1&quot;; exon_number &quot;1&quot;; gene_name &quot;LOT5&quot;; gene_source &quot;ensembl&quot;; gene_biotype &quot;protein_coding&quot;; transcript_name &quot;LOT5&quot;; transcript_source &quot;ensembl&quot;; transcript_biotype &quot;protein_coding&quot;; protein_id &quot;YKL183W&quot;; protein_version &quot;1&quot;;```</code></pre><ul><li><p>统计 IV 号染色体上各类 feature （1.gtf文件的第3列，有些注释文件中还应同时考虑第2列） 的数目，并按升序排列</p><p>  <strong>代码实现</strong></p><pre class=" language-shell"><code class="language-shell">  grep -v '^#' 1.gtf |awk '$1 == "IV"{print $3}'| sort | uniq -c </code></pre><p>  ==grep -v ‘^#’ 是为了去除以#开头的无关项==</p><p>  ​      <code>输出为</code></p></li></ul><p>​                                     <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gefn82rqjuj30gw05kgn1.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> bioinfo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2020/04/30/43167.html"/>
      <url>/2020/04/30/43167.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mac上使用Git-Github"><a href="#Mac上使用Git-Github" class="headerlink" title="Mac上使用Git+Github"></a>Mac上使用Git+Github</h1><a id="more"></a><p>详细教程参见<a href="https://www.jianshu.com/p/ef1ff4c21452" target="_blank" rel="noopener">Mac上使用Git+Github</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vi编辑器</title>
      <link href="/2020/04/30/53788.html"/>
      <url>/2020/04/30/53788.html</url>
      
        <content type="html"><![CDATA[<h1 id="vi-–-终端中的编辑器"><a href="#vi-–-终端中的编辑器" class="headerlink" title="vi – 终端中的编辑器"></a>vi – 终端中的编辑器</h1><a id="more"></a><ul><li><code>vi</code>是<code>visual interface</code>的简称,是<code>Linux</code>中最经典的文本编辑器</li><li>Vim = vi improved<ul><li><code>vim</code>是<code>vi</code>发展出来的一个文本编辑器,支持<strong>代码补全</strong>、<strong>编译</strong>及<strong>错误跳转</strong>等方便编程的功能,被称为<strong>编辑器之神</strong></li></ul></li><li>在很多<code>linux</code>发行版中, 直接把<code>vi</code>做成<code>vim</code>的软链接</li></ul><h2 id="打开和新建文件"><a href="#打开和新建文件" class="headerlink" title="打开和新建文件"></a>打开和新建文件</h2><h3 id="打开文件并且定位行"><a href="#打开文件并且定位行" class="headerlink" title="打开文件并且定位行"></a>打开文件并且定位行</h3><pre class=" language-shell"><code class="language-shell">$ vi 文件名 +行数</code></pre><blockquote><p>注意: 如果只带上<code>+</code>而不指定行号,会直接定位到文件末尾</p></blockquote><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li>如果<code>vi</code>异常退出,在磁盘上可能会保存有 <strong>交换文件</strong></li><li>下次再使用<code>vi</code>编辑该文件时, 会看到屏蔽信息, 按下字母<code>d</code><strong>删除交换文件</strong>即可</li></ul><h3 id="vi三种工作方式"><a href="#vi三种工作方式" class="headerlink" title="vi三种工作方式"></a><code>vi</code>三种工作方式</h3><ul><li>命令模式: 常规编辑操作 – vi的入口</li><li>末行模式: 执行<strong>保存、退出</strong>操作 – vi的出口</li><li>编辑模式</li></ul><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gebuaxuq89j30ix0hidgf.jpg" style="zoom:50%;" /><p><code>vi</code>的特点:</p><ul><li>只支持编辑文本内容,不能排版</li><li>不支持鼠标操作</li><li>没有菜单</li><li>只有命令</li></ul><h2 id="vi的常用命令"><a href="#vi的常用命令" class="headerlink" title="vi的常用命令"></a><code>vi</code>的常用命令</h2><p>参看<a href="https://wiki.jikexueyuan.com/project/learn-linux-step-by-step/vim-and-vi-common-commands.html" target="_blank" rel="noopener">vi常用命令</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_23</title>
      <link href="/2020/04/30/42400.html"/>
      <url>/2020/04/30/42400.html</url>
      
        <content type="html"><![CDATA[<h1 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval 函数"></a>eval 函数</h1><a id="more"></a><p><code>eval()</code>函数十分强大 – 将<strong>字符串</strong> 当成 <strong>有效的表达式</strong> 来<strong>求值</strong> 并 <strong>返回计算结果</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 基本的数学计算</span>In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> eval<span class="token punctuation">(</span><span class="token string">"1 + 1"</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 字符串变量</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> eval<span class="token punctuation">(</span><span class="token string">"'*' * 10"</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'**********'</span><span class="token comment" spellcheck="true"># 将字符串转换成列表</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>eval<span class="token punctuation">(</span><span class="token string">"[1,2,3,4,5]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list<span class="token comment" spellcheck="true"># 将字符串转换成字典</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>eval<span class="token punctuation">(</span><span class="token string">"{'name: 'xiaoming', 'age': 18}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dict</code></pre><h2 id="案例-计算器"><a href="#案例-计算器" class="headerlink" title="案例 - 计算器"></a>案例 - 计算器</h2><ul><li><p>需求</p><ul><li><p>提示用户输入一个<strong>加减乘除混合运算</strong></p></li><li><p>返回计算结果</p><pre class=" language-python"><code class="language-python">input_str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入算术题："</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>eval<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geb5mh8ei6j30gq050wes.jpg" style="zoom:33%;" /></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_22</title>
      <link href="/2020/04/30/25953.html"/>
      <url>/2020/04/30/25953.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><a id="more"></a><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 打开 - 文件名需要注意大小写</span>file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># README是一个“.txt”文件</span><span class="token comment" spellcheck="true"># 2. 读取</span>text <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 关闭</span>file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="打开文件的方式"><a href="#打开文件的方式" class="headerlink" title="打开文件的方式"></a>打开文件的方式</h2><ul><li><code>open</code>函数默认以<strong>只读模式</strong>打开文件, 并且返回文件对象</li></ul><p>语法如下:</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"文件名"</span><span class="token punctuation">,</span><span class="token string">"访问方式"</span><span class="token punctuation">)</span></code></pre><p>参考<a href="https://blog.csdn.net/chenmozhe22/article/details/81434549" target="_blank" rel="noopener">打开文件方式</a></p><h2 id="按行读取文件内容"><a href="#按行读取文件内容" class="headerlink" title="按行读取文件内容"></a>按行读取文件内容</h2><ul><li><strong>读取大文件的正确姿势</strong></li></ul><pre class=" language-python"><code class="language-python">file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> file<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断是否读取到内容</span>    <span class="token keyword">if</span> <span class="token operator">not</span> text<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geb4hmef31j306w0b074f.jpg" style="zoom:33%;" /><h2 id="小文件复制"><a href="#小文件复制" class="headerlink" title="小文件复制"></a>小文件复制</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 打开文件</span>file_read <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span>file_write <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"README[复件]"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以只写方式打开</span><span class="token comment" spellcheck="true"># 2. 读取并写入文件</span>text <span class="token operator">=</span> file_read<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>file_write<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 关闭文件</span>file_read<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>file_write<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="大文件复制"><a href="#大文件复制" class="headerlink" title="大文件复制"></a>大文件复制</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 打开文件</span>file_read <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span>file_write <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"README[复件1]"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以只写方式打开</span><span class="token comment" spellcheck="true"># 2. 读取并写入文件</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取一行内容</span>    text <span class="token operator">=</span> file_read<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断是否读取到内容</span>    <span class="token keyword">if</span> <span class="token operator">not</span> text<span class="token punctuation">:</span>        <span class="token keyword">break</span>file_write<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 关闭文件</span>file_read<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>file_write<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="文件-目录的常用管理操作"><a href="#文件-目录的常用管理操作" class="headerlink" title="文件/目录的常用管理操作"></a>文件/目录的常用管理操作</h2><ul><li>在<code>python</code>中,如果希望通过程序执行像 <strong>终端</strong> 中的 <strong>文件/目录管理操作</strong>, 需要导入<code>os</code>模块</li></ul><p>具体参考<a href="https://www.runoob.com/python/os-file-methods.html" target="_blank" rel="noopener">Python OS 文件/目录方法</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_21</title>
      <link href="/2020/04/29/25633.html"/>
      <url>/2020/04/29/25633.html</url>
      
        <content type="html"><![CDATA[<h1 id="制作发布压缩包"><a href="#制作发布压缩包" class="headerlink" title="制作发布压缩包"></a>制作发布压缩包</h1><a id="more"></a><ul><li><p><strong>创建set.up.py文件</strong></p><ul><li><p><code>set.up.py</code>的文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setup</code></pre><p>setup(name=”zzn_message”, # 包名<br>version=”1.0”, # 版本<br>description=”zzn’s 发送和接收消息模块”, # 描述信息<br>long_description=”完整的发送和接收消息模块”, # 完整描述信息<br>author=”zzn“, # 作者<br>author_email=”@.com”, # 作者邮箱<br>url=”zhangzn19.github.io”, # 主页<br>py_modules=[“aaaaaaaa.bbbbbb”,</p><pre><code>      “aaaaaaaa.cccccc”])</code></pre><pre><code></code></pre></li></ul></li></ul><p>有关字典参数的详细信息,可以参阅<a href="https://docs.python.org/2/distutils/apiref.html" target="_blank" rel="noopener">官方网站</a></p><h4 id="在终端操作以下步骤"><a href="#在终端操作以下步骤" class="headerlink" title="在终端操作以下步骤"></a>在终端操作以下步骤</h4><hr><ul><li><p><strong>构建模块</strong></p><pre class=" language-shell"><code class="language-shell">  $ python3 setup.py build</code></pre></li></ul><ul><li><p><strong>生成发布压缩包</strong></p><pre class=" language-shell"><code class="language-shell">  $ python3 setup.py sdist</code></pre></li></ul><ul><li><p><strong>安装模块</strong></p><pre class=" language-shell"><code class="language-shell">  $ tar -zxvf zzn_message-1.0.tar.gz  $ sudo python3 setup.py install</code></pre></li></ul><ul><li><p><strong>卸载模块</strong></p><ul><li><p>直接从安装目录下,把安装模块的 <strong>目录</strong> 删除就可以</p><pre class=" language-shell"><code class="language-shell">  $ cd 模块目录  # 可以利用 模块名.__file__查看模块目录  $ sudo rm -r zzn_message</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_20</title>
      <link href="/2020/04/29/42208.html"/>
      <url>/2020/04/29/42208.html</url>
      
        <content type="html"><![CDATA[<h1 id="包-package"><a href="#包-package" class="headerlink" title="包(package)"></a>包(package)</h1><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>包是一个包含多个模块的特殊目录</li><li>目录下有一个特殊的文件<strong><strong>init</strong></strong>.py</li><li>包名的命名方式和变量名一致, <strong>小写字母+<code>_</code></strong></li></ul><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>使用<code>import包名</code>可以一次性导入 <strong>包</strong> 中的 <strong>所有模块</strong></li></ul><h2 id="案例演练"><a href="#案例演练" class="headerlink" title="案例演练"></a>案例演练</h2><ol><li>新建一个<code>zzn_message</code>的包</li><li>在目录下,新建两个文件<code>send_message</code>和<code>receive_message</code></li><li>在<code>send_message</code>中定义一个<code>send</code>函数</li><li>在<code>receive_message</code>中定义一个<code>receive</code>函数</li><li>在外部直接导入<code>zzn_message</code>的包</li></ol><p><strong><strong>init</strong></strong>.py</p><ul><li>要在外界使用包的模块,需要在<code>__init__.py</code>中指定对外界提供的模块列表</li></ul><pre><code># 从 当前目录 导入 模块列表from . import send_messagefrom . import receive_message</code></pre><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geb12n1e5aj31600f8q4x.jpg" style="zoom:50%;" /><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geb14j2swjj313c09c0tx.jpg" style="zoom:33%;" /><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geb14tea63j30wc06wdh1.jpg" style="zoom:33%;" /><p>                                                  <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geb156e39hj30vs06i75c.jpg" style="zoom:33%;" />       </p><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geb16i9lsdj30ha0503yu.jpg" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_19</title>
      <link href="/2020/04/29/21024.html"/>
      <url>/2020/04/29/21024.html</url>
      
        <content type="html"><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><a id="more"></a><p>==每一个<code>python</code>文件都是一个模块==</p><ul><li><input checked="" disabled="" type="checkbox"> <p>使用<code>import</code>导入模块</p><pre><code>  import 模块名1  import 模块名2</code></pre></li></ul><pre><code>* 如果模块名字太长,可以使用`as`指定模块的名称,以方便在代码中的使用</code></pre><pre><code>import 模块名1 as 模块别名</code></pre><blockquote><p><strong>模块别名</strong> 应该符合 <strong>大驼峰命名法</strong> </p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> from … import 导入<ul><li>如果希望从<strong>某一个模块中</strong>,导入<strong>部分工具</strong>,就可以使用<code>from ... import</code>的方式</li><li><code>import 模块名</code>是一次性把模块中<strong>所有工具全部导入</strong>,并且通过<strong>模块名/别名</strong>访问</li></ul></li></ul><pre><code># 从 模块 导入 某一个工具from 模块名1 import 工具名</code></pre><ul><li>导入之后<ul><li><strong>不需要</strong>通过<code>模块名.</code></li><li>可以直接使用<strong>模块提供的工具</strong> – <strong>全局变量、函数、类</strong></li></ul></li></ul><p><strong>注意</strong></p><blockquote><p>如果两个模块,存在同名函数, 那么后导入的模块的函数,会覆盖先导入的函数</p><p>可以使用别名的方式解决</p><pre><code># 从 模块 导入 某一个工具from 模块名1 import 工具名 as 别名</code></pre></blockquote><p><code>____file___属性</code></p><ul><li>在开发时,给文件起名不要和系统的模块文件重名</li><li>模块的搜索顺序是先<strong>当前目录</strong>再<strong>系统目录</strong></li></ul><p><code>python</code>中每一个模块都有一个内置属性<code>__file__</code>可以查看模块的完整路径</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>__file__<span class="token punctuation">)</span>rand <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geazt60zizj31tq04g3z4.jpg" alt=""></p><p><code>___name___属性</code></p><ul><li><code>__name__属性</code>可以做到, 测试模块的代码<strong>只在测试情况下被运行</strong>, 而在<strong>被导入时不会被执行!</strong><ul><li>如果是被<strong>其它文件</strong>导入, <code>__name__</code>就是模块名</li><li>如果是<strong>当前执行的程序</strong>,<code>__name__</code>是<code>__main__</code></li></ul></li><li>在很多<code>python</code>文件中都会看到以下格式的代码</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入模块</span><span class="token comment" spellcheck="true"># 定义全局变量</span><span class="token comment" spellcheck="true"># 定义类</span><span class="token comment" spellcheck="true"># 定义函数</span><span class="token comment" spellcheck="true"># 在代码的最下方</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># ...</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 根据__name__判断是否执行下方代码</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_18</title>
      <link href="/2020/04/29/37601.html"/>
      <url>/2020/04/29/37601.html</url>
      
        <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><a id="more"></a><p>==<strong>程序停止执行并且提示错误信息</strong>这个动作, 我们通常称之为: <strong>抛出异常</strong>==</p><h3 id="简单的错误捕获"><a href="#简单的错误捕获" class="headerlink" title="简单的错误捕获"></a>简单的错误捕获</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 尝试执行的代码</span>    <span class="token comment" spellcheck="true"># 不能确定正确执行的代码</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 错误的处理代码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入正确的整数"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span></code></pre><p><code>注意:无论是否有错代码都会执行</code></p><h3 id="根据错误类型捕获异常"><a href="#根据错误类型捕获异常" class="headerlink" title="根据错误类型捕获异常"></a>根据错误类型捕获异常</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 提示用户输入一个整数</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用 8 除以用户输入的整数并且输出</span>    result <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">/</span> num    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"除0错误"</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入正确的整数"</span><span class="token punctuation">)</span></code></pre><p><code>当python解释器抛出异常时,最后一行错误信息的第一个单词,就是错误类型</code></p><h3 id="捕获未知错误"><a href="#捕获未知错误" class="headerlink" title="捕获未知错误"></a>捕获未知错误</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 提示用户输入一个整数</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用 8 除以用户输入的整数并且输出</span>    result <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">/</span> num    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 主要错误类型</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入正确的整数"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 捕获其它未知错误</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未知错误 %s"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geantjxg6ej30jy05ejru.jpg" style="zoom:33%;" /><h3 id="捕获异常的完整语法"><a href="#捕获异常的完整语法" class="headerlink" title="捕获异常的完整语法"></a>捕获异常的完整语法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 提示用户输入一个整数</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用 8 除以用户输入的整数并且输出</span>    result <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">/</span> num    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 主要错误类型</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入正确的整数"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 捕获其它未知错误</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未知错误 %s"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"尝试成功"</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"无论是否出现错误都会执行的"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span></code></pre><h3 id="异常的传递性"><a href="#异常的传递性" class="headerlink" title="异常的传递性"></a>异常的传递性</h3><ul><li>异常的传递 – 当函数/方法执行出现异常, 会将异常传递给函数/方法的调用一方</li><li>如果传递给主程序, 仍然没有异常处理,程序才会被终止</li><li>这样就可以在主程序中增加异常捕获, 不需要增加大量的异常捕获</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"输入整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> demo1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 利用异常的传递性，在主程序捕获异常</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>demo2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未知错误 %s"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geap972llhj314004swf5.jpg" style="zoom:33%;" /><h3 id="主动抛出异常-–-raise"><a href="#主动抛出异常-–-raise" class="headerlink" title="主动抛出异常 – raise"></a>主动抛出异常 – raise</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">input_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1. 提示用户输入密码</span>    pwd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2. 判断密码长度 >= 8，返回用户输入密码</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> pwd    <span class="token comment" spellcheck="true"># 3. 如果 &lt; 8 主动抛出异常</span>    <span class="token comment" spellcheck="true"># 1> 创建异常对象 - 可以使用错误信息字符串作为参数</span>    ex <span class="token operator">=</span> Exception<span class="token punctuation">(</span><span class="token string">"密码长度不够"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2> 主动抛出异常</span>    <span class="token keyword">raise</span> ex<span class="token comment" spellcheck="true"># 提示用户输入密码</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>input_password<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geaqi2rn5mj30aa04cjrn.jpg" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_17</title>
      <link href="/2020/04/29/38561.html"/>
      <url>/2020/04/29/38561.html</url>
      
        <content type="html"><![CDATA[<h1 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h1><a id="more"></a><ul><li><input checked="" disabled="" type="checkbox"> <strong>单例设计模式</strong>:<ul><li><strong>目的</strong>: 让<strong>类</strong>创建的对象,在系统中 <strong>只有</strong> <strong>唯一的一个实例</strong></li><li>每一次执行 <code>类名()</code>返回的对象, <strong>内存地址是相同的</strong></li></ul></li></ul><h3 id="new-方法"><a href="#new-方法" class="headerlink" title="new 方法"></a><strong><strong>new</strong></strong> 方法</h3><ul><li>重写<strong><strong>new</strong></strong>方法一定要<code>return.super().__new__(cls)</code></li><li>否则python的解释器得不到分配了空间的对象引用,<strong>就不会调用对象的初始化方法</strong></li><li>注意: <code>__new__</code>是一个静态方法,在调用时需要<strong>主动传递</strong><code>cls参数</code></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 1. 创建对象时，new方法会被自动调用</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"创建对象，分配空间"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2. 为对象分配空间</span>        instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3. 返回对象引用</span>        <span class="token keyword">return</span> instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"播放器初始化"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建播放器对象</span>player <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1geal8s96flj313a078757.jpg" style="zoom: 33%;" /><h3 id="单例设计模式代码实现"><a href="#单例设计模式代码实现" class="headerlink" title="单例设计模式代码实现"></a>单例设计模式代码实现</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 记录第一个被创建对象的引用</span>    <span class="token comment" spellcheck="true"># 赋值语句创建类属性</span>    instance <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 1. 判断类属性是否是空对象</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>instance <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 2. 调用父类的方法，为第一个对象分配空间</span>            cls<span class="token punctuation">.</span>instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3. 返回类属性保存的对象引用</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instance<span class="token comment" spellcheck="true"># 创建多个对象</span>player1 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span>player2 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gealcercltj30z604g74z.jpg" style="zoom:33%;" /><h3 id="让单例初始化动作只执行一次"><a href="#让单例初始化动作只执行一次" class="headerlink" title="让单例初始化动作只执行一次"></a>让单例初始化动作只执行一次</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 记录第一个被创建对象的引用</span>    <span class="token comment" spellcheck="true"># 赋值语句创建类属性</span>    instance <span class="token operator">=</span> None    <span class="token comment" spellcheck="true"># 记录是否执行过初始化动作</span>    init_flag <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 1. 判断类属性是否是空对象</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>instance <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 2. 调用父类的方法，为第一个对象分配空间</span>            cls<span class="token punctuation">.</span>instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3. 返回类属性保存的对象引用</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 1. 判断是否执行过初始化动作</span>        <span class="token keyword">if</span> MusicPlayer<span class="token punctuation">.</span>init_flag<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token comment" spellcheck="true"># 2. 如果没有执行过，再执行初始化动作</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"初始化播放器"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3. 修改类属性的标记</span>        MusicPlayer<span class="token punctuation">.</span>init_flag <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 创建多个对象</span>player1 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span>player2 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gealu8izpij30zi06ojsk.jpg" style="zoom:33%;" />]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_16</title>
      <link href="/2020/04/29/22112.html"/>
      <url>/2020/04/29/22112.html</url>
      
        <content type="html"><![CDATA[<h1 id="方法综合演练"><a href="#方法综合演练" class="headerlink" title="方法综合演练"></a>方法综合演练</h1><a id="more"></a><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a><strong>需求</strong></h3><ul><li><input disabled="" type="checkbox"> <p>设计一个game类</p></li><li><input disabled="" type="checkbox"> <p>属性:</p><ul><li>定义一个<strong>类属性</strong><code>top_score</code>记录游戏的<strong>历史最高分</strong></li><li>定义一个<strong>实例属性</strong><code>player_name</code>记录<strong>当前游戏的玩家姓名</strong></li></ul></li><li><input disabled="" type="checkbox"> <p>方法:</p><ul><li><strong>静态方法</strong><code>show_help</code>显示游戏帮助信息</li><li><strong>类方法</strong><code>show_top_score</code>显示历史最高分</li><li><strong>实例方法</strong><code>start_game</code>开始当前玩家的游戏</li></ul></li><li><input disabled="" type="checkbox"> <p>主程序步骤</p><ul><li>查看帮助信息</li><li>查看历史最高分</li><li>创建游戏对象,开始游戏</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建类属性 - 历史最高分</span>    top_score <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 创建实例属性 - 玩家姓名</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>player_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player_name <span class="token operator">=</span> player_name    <span class="token comment" spellcheck="true"># 静态方法</span>    @ staticmethod    <span class="token keyword">def</span> <span class="token function">show_help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"帮助信息，让僵尸进入大门"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 类方法</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">show_top_score</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"历史记录 %d"</span> <span class="token operator">%</span> cls<span class="token punctuation">.</span>top_score<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实例方法</span>    <span class="token keyword">def</span> <span class="token function">start_game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 开始游戏啦..."</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>player_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1. 查看游戏帮助信息</span>Game<span class="token punctuation">.</span>show_help<span class="token comment" spellcheck="true"># 2. 查看历史最高分</span>Game<span class="token punctuation">.</span>show_top_score<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 创建游戏对象</span>game <span class="token operator">=</span> Game<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span>game<span class="token punctuation">.</span>start_game<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge9y4a2fiij30cq03wt8y.jpg" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_15</title>
      <link href="/2020/04/28/22304.html"/>
      <url>/2020/04/28/22304.html</url>
      
        <content type="html"><![CDATA[<h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 不访问实例属性或类属性</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小狗要跑..."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过类名.调用静态方法 - 不需要创建对象</span>Dog<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><code>小狗要跑...</code></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_14</title>
      <link href="/2020/04/28/38881.html"/>
      <url>/2020/04/28/38881.html</url>
      
        <content type="html"><![CDATA[<h1 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h1><a id="more"></a><p>==在python中, 一切皆是对象, 包括类==</p><blockquote><p>在类方法内部可以直接访问<strong>类属性</strong>或者调用其它的类方法</p></blockquote><p>语法如下</p><pre><code>@classmethoddef 类方法名(cls):    pass</code></pre><p><code>演练</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Tool</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 使用赋值语句定义类属性，记录所有工作对象的数量</span>    count <span class="token operator">=</span> <span class="token number">0</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">show_tool_count</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"工具对象的数量是 %d"</span> <span class="token operator">%</span> cls<span class="token punctuation">.</span>count<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token comment" spellcheck="true"># 让类属性的值+1</span>        Tool<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 创建工具对象</span>tool1 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">"斧头"</span><span class="token punctuation">)</span>tool2 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">"榔头"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用类方法</span>Tool<span class="token punctuation">.</span>show_tool_count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><pre><code>工具对象的数量是 2</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_13</title>
      <link href="/2020/04/28/21920.html"/>
      <url>/2020/04/28/21920.html</url>
      
        <content type="html"><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><a id="more"></a><p>==不同的子类对象调用相同的父类方法, 产生不同的执行结果==</p><blockquote><p>以<strong>继承</strong>和<strong>重写父类方法</strong>为前提</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""object是所有类的基类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 蹦蹦跳跳的玩耍..."</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XiaoTianDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 飞到天上去玩耍..."</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">game_with_dog</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>dog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 和 %s 快乐的玩耍..."</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 让狗玩耍</span>        <span class="token comment" spellcheck="true"># TODO 让不同的子类对象调用相同的方法</span>        dog<span class="token punctuation">.</span>game<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1. 创建一个狗对象</span><span class="token comment" spellcheck="true"># TODO 让不同的子类对象(不同的狗)调用相同的方法</span><span class="token comment" spellcheck="true"># wangcai = Dog("旺财")</span>wangcai <span class="token operator">=</span> XiaoTianDog<span class="token punctuation">(</span><span class="token string">"飞天旺财"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 创建一个小明对象</span>xiaoming <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 让小明调用和狗玩的方法</span>xiaoming<span class="token punctuation">.</span>game_with_dog<span class="token punctuation">(</span>wangcai<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge9lnmsmh8j30n6050wez.jpg" style="zoom:33%;" />]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_12</title>
      <link href="/2020/04/27/38241.html"/>
      <url>/2020/04/27/38241.html</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><a id="more"></a><ul><li>概念: <code>子类</code>拥有<code>父类</code>的所有方法和属性</li></ul><h2 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"吃"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"喝"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"跑"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"睡"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># class 子类(父类):</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"汪汪叫"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XiaoTianQuan</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我会飞"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个对象 - 狗对象</span>wangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 子类拥有父类的所有属性</span>wangcai<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>drink<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个啸天犬的对象</span>xtq <span class="token operator">=</span> XiaoTianQuan<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq<span class="token punctuation">.</span>fly<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><p>专业术语</p><p>   <code>Dog</code>类是<code>Animal</code>类的<strong>子类</strong>, <code>Animal</code>类是<code>Dog</code>类的<strong>父类</strong>, <code>Dog</code>类从<code>Animal</code>类<strong>继承</strong></p><p>   <code>Dog</code>类是<code>Animal</code>类的<strong>派生类</strong>, <code>Animal</code>类是<code>Dog</code>类的<strong>基类</strong>, <code>Dog</code>类从<code>Animal</code>类<strong>派生</strong></p></li></ul><h3 id="方法的重写-–-覆盖父类方法"><a href="#方法的重写-–-覆盖父类方法" class="headerlink" title="方法的重写 – 覆盖父类方法"></a>方法的重写 – 覆盖父类方法</h3><ul><li><p>如果在开发中,父类的方法实现和子类的方法实现完全不同</p></li><li><p>就可以使用<strong>覆盖</strong>的方式, 在子类中<strong>重新编写</strong>父类的方法实现</p><blockquote><p>具体的实现方式,就相当于在<strong>子类中</strong>定义一个<strong>和父类同名的方法并且实现</strong></p></blockquote></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"吃"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"喝"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"跑"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"睡"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># class 子类(父类):</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"汪汪叫"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XiaoTianQuan</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我会飞"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"叫得跟神一样..."</span><span class="token punctuation">)</span>xtq <span class="token operator">=</span> XiaoTianQuan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果子类中，重写了父类的方法</span><span class="token comment" spellcheck="true"># 在使用子类对象调用方法时，会调用子类中重写的方法</span>xtq<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="扩展父类方法"><a href="#扩展父类方法" class="headerlink" title="扩展父类方法"></a>扩展父类方法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"吃"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"喝"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"跑"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"睡"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># class 子类(父类):</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"汪汪叫"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XiaoTianQuan</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我会飞"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 1. 针对子类特有的需求，编写代码</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"叫得跟神一样..."</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2. 使用 super(). 调用原本在父类中封装的方法</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 在更早的python版本中,使用 父类名.方法(self)</span>        <span class="token comment" spellcheck="true"># Dog.bark(self)  # 在这里如果使用当前子类名调用方法 XiaoTianQuan.bark(self),会形成递归调用,出现死循环</span>        <span class="token comment" spellcheck="true"># 3. 增加其它子类的代码</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"#$$%%%^^^^"</span><span class="token punctuation">)</span>xtq <span class="token operator">=</span> XiaoTianQuan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果子类中，重写了父类的方法</span><span class="token comment" spellcheck="true"># 在使用子类对象调用方法时，会调用子类中重写的方法</span>xtq<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><p><strong>子类对象</strong> <strong>不能</strong> 在自己的方法内部,<strong>直接</strong>访问父类的<strong>私有属性</strong>或者<strong>私有方法</strong></p></li><li><p><strong>子类对象</strong>可以通过<strong>父类的公有方法</strong>间接访问到<strong>私有属性</strong>或者<strong>私有方法</strong></p><blockquote><p>也就是父类的公有方法中包含私有属性和私有方法,子类通过调用父类公有方法也能够调用到包含在公有方法下的私有属性和私有方法</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_11</title>
      <link href="/2020/04/27/37921.html"/>
      <url>/2020/04/27/37921.html</url>
      
        <content type="html"><![CDATA[<h1 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h1><a id="more"></a><ul><li>在实际开发中,对象的某些属性或者方法可能只希望在对象的内部被使用,而不希望在外部被访问到</li><li>在定义属性或者方法时,在属性名或者方法名前增加两个下划线,定义的就是私有属性和私有方法</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Women</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">def</span> <span class="token function">__secret</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 在对象的方法内部，是可以访问对象的私有属性的</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s的年龄是%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>__age<span class="token punctuation">)</span><span class="token punctuation">)</span>xiaofang <span class="token operator">=</span> Women<span class="token punctuation">(</span><span class="token string">"小芳"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 私有属性在外界不能够被直接访问</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaofang<span class="token punctuation">.</span>__age<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 私有方法，同样不允许在外界直接被访问</span>xiaofang<span class="token punctuation">.</span>___secret<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge83j8lw0ej318y04ijs2.jpg" alt=""></p><ul><li>python中,并没有真正意义的私有,在名称前面加上_类名 ==&gt; _类名__名称</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Women</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">def</span> <span class="token function">__secret</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 在对象的方法内部，是可以访问对象的私有属性的</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s的年龄是%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>__age<span class="token punctuation">)</span><span class="token punctuation">)</span>xiaofang <span class="token operator">=</span> Women<span class="token punctuation">(</span><span class="token string">"小芳"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 私有属性在外界不能够被直接访问</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaofang<span class="token punctuation">.</span>_Women__age<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 私有方法，同样不允许在外界直接被访问</span>xiaofang<span class="token punctuation">.</span>_Women__secret<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge83z4zxg1j30as0460su.jpg" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_10</title>
      <link href="/2020/04/26/21728.html"/>
      <url>/2020/04/26/21728.html</url>
      
        <content type="html"><![CDATA[<h1 id="士兵突击"><a href="#士兵突击" class="headerlink" title="士兵突击"></a>士兵突击</h1><a id="more"></a><p>​                         <strong>在定义属性时,如果不知道设置什么初始值,可以设置为None</strong></p><p>​                         <strong>在<code>python</code>中针对<code>None</code>比较时, 建议使用<code>is</code>判断</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Gun</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 1. 枪的型号</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        <span class="token comment" spellcheck="true"># 2. 子弹的数量</span>        self<span class="token punctuation">.</span>bullet_count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">add_bullet</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bullet_count <span class="token operator">+=</span> count    <span class="token keyword">def</span> <span class="token function">shoot</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 1. 判断子弹数量</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>bullet_count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[%s]没有子弹了..."</span> <span class="token operator">%</span>self<span class="token punctuation">.</span>model<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token comment" spellcheck="true"># 2. 发射子弹， -1</span>        self<span class="token punctuation">.</span>bullet_count <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 提示发射信息</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[%s] 突突突... [%d]"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">,</span>self<span class="token punctuation">.</span>bullet_count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Soldier</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 1. 姓名</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token comment" spellcheck="true"># 2. 枪 - 新兵没有枪</span>        self<span class="token punctuation">.</span>gun <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">fire</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 1. 判断士兵是否有枪</span>        <span class="token comment" spellcheck="true"># if self.gun == None:</span>        <span class="token comment" spellcheck="true"># 在python中针对None比较时, 建议使用 is 判断</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>gun <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[%s] 还没有枪..."</span> <span class="token operator">%</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token comment" spellcheck="true"># 2. 高喊口号</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"冲啊...[%s]"</span> <span class="token operator">%</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3. 让枪装填子弹</span>        self<span class="token punctuation">.</span>gun<span class="token punctuation">.</span>add_bullet<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 4. 让枪发射子弹</span>        self<span class="token punctuation">.</span>gun<span class="token punctuation">.</span>shoot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建枪对象</span>ak47 <span class="token operator">=</span> Gun<span class="token punctuation">(</span><span class="token string">"AK47"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建许三多</span>xusanduo <span class="token operator">=</span> Soldier<span class="token punctuation">(</span><span class="token string">"许三多"</span><span class="token punctuation">)</span>xusanduo<span class="token punctuation">.</span>gun <span class="token operator">=</span> ak47xusanduo<span class="token punctuation">.</span>fire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xusanduo<span class="token punctuation">.</span>gun<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge7bi8m4vaj30tq06kwf5.jpg" style="zoom:50%;" /><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>身份运算符用于<code>比较</code>两个对象的<code>内存地址</code>是否一致 ——<strong>是否是对同一个对象的引用</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>判断两个标识符是不是引用同一个对象</td><td>x is y, 类似 id(x) == id(y)</td></tr><tr><td>is not</td><td>判断两个标识符是不是引用不同对象</td><td>x is not y, 类似 id(a) != id(b)</td></tr></tbody></table><h3 id="is-与-区别"><a href="#is-与-区别" class="headerlink" title="is 与 == 区别"></a>is 与 == 区别</h3><p><code>is</code>用于判断<strong>两个变量引用对象</strong>是否为同一个</p><p><code>==</code>用于判断<strong>引用变量的值</strong>是否相等</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_09</title>
      <link href="/2020/04/26/49697.html"/>
      <url>/2020/04/26/49697.html</url>
      
        <content type="html"><![CDATA[<h1 id="摆放家具"><a href="#摆放家具" class="headerlink" title="摆放家具"></a>摆放家具</h1><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HouseItem</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>area <span class="token operator">=</span> area    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token string">"[%s]占地%.2f"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">House</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>house_type<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>house_type <span class="token operator">=</span> house_type        self<span class="token punctuation">.</span>area <span class="token operator">=</span> area        <span class="token comment" spellcheck="true"># 剩余面积</span>        self<span class="token punctuation">.</span>free_area <span class="token operator">=</span> area        <span class="token comment" spellcheck="true"># 家具名称列表</span>        self<span class="token punctuation">.</span>item_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># python 能够自动的将一对括号内部的代码连接在一起</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"户型：%s\n总面积：%.2f[剩余：%.2f]\n家具：%s"</span>                <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>house_type<span class="token punctuation">,</span>self<span class="token punctuation">.</span>area<span class="token punctuation">,</span>self<span class="token punctuation">.</span>free_area<span class="token punctuation">,</span>self<span class="token punctuation">.</span>item_list<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"要添加%s"</span> <span class="token operator">%</span>item<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 1. 判断家具面积</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>area <span class="token operator">></span> self<span class="token punctuation">.</span>free_area<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s的面积太大，无法添加"</span> <span class="token operator">%</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token comment" spellcheck="true"># 2. 将家具的名称添加到列表中</span>        self<span class="token punctuation">.</span>item_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3. 计算剩余面积</span>        self<span class="token punctuation">.</span>free_area <span class="token operator">-=</span> item<span class="token punctuation">.</span>area<span class="token comment" spellcheck="true"># 创建家具</span>bed <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">"席梦思"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>chest <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">"衣柜"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>table <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">"餐桌"</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bed<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>chest<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建房子对象</span>my_home <span class="token operator">=</span> House<span class="token punctuation">(</span><span class="token string">"两室一厅"</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>my_home<span class="token punctuation">.</span>add_item<span class="token punctuation">(</span>bed<span class="token punctuation">)</span>my_home<span class="token punctuation">.</span>add_item<span class="token punctuation">(</span>chest<span class="token punctuation">)</span>my_home<span class="token punctuation">.</span>add_item<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_home<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge792ys9hoj30nu0j8jtr.jpg" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_08</title>
      <link href="/2020/04/25/736.html"/>
      <url>/2020/04/25/736.html</url>
      
        <content type="html"><![CDATA[<h1 id="小明爱跑步"><a href="#小明爱跑步" class="headerlink" title="小明爱跑步"></a>小明爱跑步</h1><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># self.属性 = 形参</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>weight <span class="token operator">=</span> weight    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我的名字叫 %s 体重是 %.2f 公斤"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 爱跑步，跑步锻炼身体"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>weight <span class="token operator">-=</span> <span class="token number">0.5</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 是吃货,吃完这顿再减肥"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>weight <span class="token operator">+=</span> <span class="token number">1</span>xiaoming <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">75.0</span><span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span>xiaomei <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">"小美"</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span>xiaomei<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>xiaomei<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaomei<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge656j0dqtj30p20cujti.jpg" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_07</title>
      <link href="/2020/04/25/1696.html"/>
      <url>/2020/04/25/1696.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><a id="more"></a><h2 id="第一个实战演练"><a href="#第一个实战演练" class="headerlink" title="第一个实战演练"></a>第一个实战演练</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 需求：小猫爱吃鱼，小猫要喝水</span><span class="token comment" spellcheck="true"># 定义一个猫类(Cat)，定义两个方法(eat 和 drink)</span><span class="token comment" spellcheck="true"># 类的命名需要大驼峰命名</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小猫爱吃鱼"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小猫要喝水"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建对象</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>tom<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>tom<span class="token punctuation">.</span>drink<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 可以看出变量引用的对象是哪一个类创建的对象,以及内存中的地址(十六进制表示),%d以10进制输出数字,%x是以16进制输出</span></code></pre><p>==<code>类只有一个,但可以用类创建不同的对象</code>==</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小猫爱吃鱼"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小猫要喝水"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建对象</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>tom<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>tom<span class="token punctuation">.</span>drink<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 再创建一个猫对象</span>lazy_cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>lazy_cat<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>lazy_cat<span class="token punctuation">.</span>drink<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lazy_cat<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge6200llgpj30tc0c2ta3.jpg" style="zoom:50%;" /><h2 id="设置对象属性"><a href="#设置对象属性" class="headerlink" title="设置对象属性"></a>设置对象属性</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 哪一个对象调用的方法，self就是哪一个对象的引用</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 爱吃鱼"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 要喝水"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建对象</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以使用 .属性名 利用赋值语句就可以了</span><span class="token comment" spellcheck="true"># tom.name = "Tom"  不推荐在类的外部创建属性</span>tom<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>tom<span class="token punctuation">.</span>drink<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 再创建一个猫对象</span>lazy_cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># lazy_cat.name = "大懒猫"</span>lazy_cat<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>lazy_cat<span class="token punctuation">.</span>drink<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lazy_cat<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge62kft5mpj30u009wwfn.jpg" style="zoom:50%;" /><h2 id="在初始化方法内部定义对象的属性"><a href="#在初始化方法内部定义对象的属性" class="headerlink" title="在初始化方法内部定义对象的属性"></a>在初始化方法内部定义对象的属性</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是一个初始化方法"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.属性名 = 属性的初始值</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 爱吃鱼"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用类名()创建对象的时候，会自动调用初始化方法__init__</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>tom<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge636dk3j1j30d005wjrp.jpg" style="zoom:50%;" /><p><strong>但是上述方法会把name属性固定死,应该在函数内部加上形参使函数变得灵活</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>new_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是一个初始化方法"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.属性名 = 属性的初始值</span>        <span class="token comment" spellcheck="true"># self.name = "Tom"</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> new_name    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 爱吃鱼"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用类名()创建对象的时候，会自动调用初始化方法__init__</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span>tom<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">)</span>lazy_cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">"大懒猫"</span><span class="token punctuation">)</span>lazy_cat<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="str-函数"><a href="#str-函数" class="headerlink" title="str 函数"></a><strong><em>str</em></strong> 函数</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>new_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> new_name        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 来了"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 是变量生命周期结束前执行的最后一个函数</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 去了"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 必须返回一个字符串</span>        <span class="token keyword">return</span> <span class="token string">"我是小猫[%s]"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token comment" spellcheck="true"># Tom是一个全局变量</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge64am4qhxj30a6062mxe.jpg" style="zoom: 50%;" />]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DMH-BNST-CeA相关神经环路</title>
      <link href="/2020/04/23/17792.html"/>
      <url>/2020/04/23/17792.html</url>
      
        <content type="html"><![CDATA[<h1 id="DMH-BNST-CeA相关神经环路"><a href="#DMH-BNST-CeA相关神经环路" class="headerlink" title="DMH-BNST-CeA相关神经环路"></a>DMH-BNST-CeA相关神经环路</h1><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge3iqvtye0j30wu0u0q6f.jpg" style="zoom:33%;" /><a id="more"></a><p><strong>PVT==&gt;CeA</strong></p><p><strong><a href="https://sci-hub.tw/10.1016/j.neulet.2010.11.007" target="_blank" rel="noopener">depressive like behavior</a></strong></p><p><strong><a href="https://sci-hub.tw/10.1038/nature13978" target="_blank" rel="noopener">fear conditioning</a></strong></p><p><strong><a href="https://www.nature.com/articles/nn.4101.pdf" target="_blank" rel="noopener">anxiety-related behaviors</a></strong></p><hr><p><strong>PVT==&gt;DMH</strong></p><p><strong><a href="https://www.biorxiv.org/content/10.1101/185538v1.full.pdf" target="_blank" rel="noopener">cocaine-seeking behavior</a></strong></p><hr><p><strong>PVT==&gt;BNST</strong></p><p><strong><a href="https://sci-hub.tw/10.1016/j.cub.2018.11.020" target="_blank" rel="noopener">arousal</a></strong></p><hr><p><strong>MeA==&gt;DMH</strong></p><p><strong><a href="https://sci-hub.tw/10.1007/s00429-013-0566-y" target="_blank" rel="noopener">解剖学证据</a></strong></p><hr><p><strong>mPFC==&gt;DMH</strong></p><p><strong><a href="https://sci-hub.tw/10.1126/science.aaz4639" target="_blank" rel="noopener">sympathetic stress responses</a></strong></p><hr><p><strong>PAG==&gt;DMH</strong></p><p><strong><a href="https://journals.physiology.org/doi/pdf/10.1152/ajpregu.00051.2015" target="_blank" rel="noopener">sympathetic stress responses</a></strong></p><hr><p><strong>LS==&gt;DMH/BNST</strong></p><p><strong><a href="https://sci-hub.tw/10.1007/s00429-013-0566-y" target="_blank" rel="noopener">解剖学证据</a></strong></p><hr><p><strong>MeA==&gt;BNST</strong></p><p><strong><a href="https://sci-hub.tw/10.1038/nrn.2015.8" target="_blank" rel="noopener">grooming behaviour</a></strong></p><p><strong><a href="https://sci-hub.tw/10.1038/nn.4346" target="_blank" rel="noopener">social dynamics</a></strong></p><p><strong><a href="https://sci-hub.tw/10.1037/a0021465" target="_blank" rel="noopener">novelty response</a></strong></p><hr><p><strong>mPFC/BLA/CeA==&gt;BNST</strong></p><p><strong><a href="https://www.nature.com/articles/nn.4101.pdf" target="_blank" rel="noopener"> anxiety-related behaviors</a></strong></p><p><strong>CeA==&gt;BNST</strong></p><p><strong><a href="https://sci-hub.tw/10.1016/j.expneurol.2011.12.034" target="_blank" rel="noopener">opioid addictive behaviors</a></strong></p><hr><p><strong>Hippocampus==&gt;BNST</strong></p><p><strong><a href="https://sci-hub.tw/10.1038/ncomms10188" target="_blank" rel="noopener"> appetite</a></strong></p><hr><p><strong>BNST==&gt;CeA</strong></p><p><strong><a href="https://sci-hub.tw/10.1152/jn.00677.2015" target="_blank" rel="noopener">conditioned fear</a></strong></p><hr><p><strong>BNST==&gt;DMH</strong></p><p><strong><a href="https://sci-hub.tw/10.1016/j.tem.2007.12.002" target="_blank" rel="noopener">解剖学依据</a></strong></p><hr><p><strong>BNST==&gt;PVN</strong></p><p><strong><a href="https://www.jneurosci.org/content/jneuro/27/8/2025.full.pdf" target="_blank" rel="noopener">解剖学证据</a></strong></p><hr><p><strong>DMH==&gt;PVN</strong></p><p><strong><a href="https://sci-hub.tw/10.1002/(sici)1096-9861(19960422)368:1<88::aid-cne6>3.0.co;2-g" target="_blank" rel="noopener">stress</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 神经环路 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_06</title>
      <link href="/2020/04/21/50785.html"/>
      <url>/2020/04/21/50785.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h1><a id="more"></a><p><code>定义</code>: <strong>一个函数内部调用自己</strong></p><ul><li><p>当参数满足一个条件后,函数不再执行</p><p>  ==通常被称为<strong>递归的出口</strong>,否则会出现死循环==</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_numbers</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 递归的出口，当参数满足某个条件时，不再执行函数</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token comment" spellcheck="true"># 自己调用自己</span>    sum_numbers<span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>sum_numbers<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge1rvqfz9xj301o07ka9y.jpg" alt=""></p><h2 id="实战演练-–-递归求和"><a href="#实战演练-–-递归求和" class="headerlink" title="实战演练 – 递归求和"></a>实战演练 – 递归求和</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个函数 sum_numbers</span><span class="token comment" spellcheck="true"># 能够接收一个num的整数参数</span><span class="token comment" spellcheck="true"># 计算 1 + 2 + ···· num的结果</span><span class="token keyword">def</span> <span class="token function">sum_numbers</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 出口</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 反过来思考，输出为num，从求和的最小值考虑</span>    <span class="token comment" spellcheck="true"># 数字的累加 num + (1 + ··· num-1)</span>    <span class="token comment" spellcheck="true"># 假设 sum_numbers 能够正确的处理 1 + ··· num-1</span>    temp <span class="token operator">=</span> sum_numbers<span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> tempresult <span class="token operator">=</span> sum_numbers<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p><strong>输出为结果</strong><code>3</code></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_05</title>
      <link href="/2020/04/21/50977.html"/>
      <url>/2020/04/21/50977.html</url>
      
        <content type="html"><![CDATA[<h1 id="多值参数"><a href="#多值参数" class="headerlink" title="多值参数"></a>多值参数</h1><a id="more"></a><hr><ul><li>参数名前增加一个<code>*</code>可以接收元组</li><li>参数名前增加一个<code>**</code>可以接收字典,但是定义时应该用键值对</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token operator">*</span>nums<span class="token punctuation">,</span><span class="token operator">**</span>person<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># demo(1)</span>demo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字典应该用键值对定义</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge1qkxo5loj30na06a74m.jpg" alt=""></p><h2 id="实战演练-–-求和"><a href="#实战演练-–-求和" class="headerlink" title="实战演练 – 求和"></a>实战演练 – 求和</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 求和</span><span class="token keyword">def</span> <span class="token function">sum_numbers</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 循环遍历</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>        num <span class="token operator">+=</span> n    <span class="token keyword">return</span> numresult <span class="token operator">=</span> sum_numbers<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge1r1pryuvj309g044t8p.jpg" alt=""></p><h2 id="拆包语法"><a href="#拆包语法" class="headerlink" title="拆包语法"></a>拆包语法</h2><ul><li>将一个<strong>元组变量</strong>直接传递给<code>args</code></li><li>将一个<strong>字典变量</strong>直接传递给<code>kwargs</code></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 元组和字典变量</span>gl_args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>gl_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span> <span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token string">"age"</span> <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># demo(gl_args,gl_kwargs) 会将变量全部传递给元组</span><span class="token comment" spellcheck="true">#拆包语法，简化元组变量/字典变量的传递</span>demo<span class="token punctuation">(</span><span class="token operator">*</span>gl_args<span class="token punctuation">,</span><span class="token operator">**</span>gl_kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># demo(1,2,3,name = "小明",age = 18) 在不使用拆包语法可以这样写，比较麻烦</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge1rj30jtoj30na06a74m.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_04</title>
      <link href="/2020/04/21/2016.html"/>
      <url>/2020/04/21/2016.html</url>
      
        <content type="html"><![CDATA[<h1 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h1><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>title<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>gender<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    带有默认值的缺省参数应放在参数列表末尾    <span class="token triple-quoted-string string">"""    :param title: 职位    :param name: 班上同学的姓名    :param gender: True 男生 False 女生    """</span>    gender_text <span class="token operator">=</span> <span class="token string">"男生"</span>    <span class="token keyword">if</span> <span class="token operator">not</span> gender<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># not 为取反，也就是false</span>        gender_text <span class="token operator">=</span> <span class="token string">"女生"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[%s]%s 是 %s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender_text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 假设班上的同学，男生居多！</span><span class="token comment" spellcheck="true"># 提示：在指定缺省参数的默认值时，应该使用最常见的值作为默认值！</span><span class="token comment" spellcheck="true"># 本例中的 gender 就是缺省参数，默认值是True</span>print_info<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span>print_info<span class="token punctuation">(</span><span class="token string">"小美"</span><span class="token punctuation">,</span>gender<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不指认gender时会默认把false指认给title</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge1oeg0ii3j30bw04umxb.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_03</title>
      <link href="/2020/04/21/50593.html"/>
      <url>/2020/04/21/50593.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h1><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数内部的代码"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在函数内部，针对参数使用赋值语句，不会修改到外部的实参变量</span>    num <span class="token operator">=</span> <span class="token number">100</span>    num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数执行完成"</span><span class="token punctuation">)</span>gl_num <span class="token operator">=</span> <span class="token number">99</span>gl_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>demo<span class="token punctuation">(</span>gl_num<span class="token punctuation">,</span>gl_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_list<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge1kavdz4jj30ew0dgaas.jpg" alt=""></p><p><strong>但是用方法修改则会影响外部的数据</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数内部的代码"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在函数内部，使用方法修改参数</span>    num_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数执行完成"</span><span class="token punctuation">)</span>gl_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>demo<span class="token punctuation">(</span>gl_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_list<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge1kocun9gj30cy09cdgf.jpg" alt=""></p><p><strong>面试题 +=</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数内部代码"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># num = num + num</span>    num <span class="token operator">+=</span> num    <span class="token comment" spellcheck="true"># 列表使用 += 相当于调用extend方法，num_list.extend(num_list)由于是调用方法，所以不会修改变量的引用</span>    <span class="token comment" spellcheck="true"># num_list = num_list + num_list 因为是赋值所以不会影响</span>    <span class="token comment" spellcheck="true"># 函数执行结束后，外部数据同样会发生变化</span>    num_list <span class="token operator">+=</span> num_list    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数代码完成"</span><span class="token punctuation">)</span>gl_num <span class="token operator">=</span> <span class="token number">9</span>gl_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>demo<span class="token punctuation">(</span>gl_num<span class="token punctuation">,</span>gl_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_list<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ge1l6d9ycyj30ie0doq3o.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_02</title>
      <link href="/2020/04/18/1376.html"/>
      <url>/2020/04/18/1376.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h1><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">measure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""测量湿度和温度"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测量开始..."</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token number">39</span>    wetness <span class="token operator">=</span> <span class="token number">50</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测量结束..."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 元组(tuple) - 可以包含多个数据，因此可以使用元组让函数一次返回多个值</span>    <span class="token comment" spellcheck="true"># 如果函数返回的类型是元组，小括号可以省略</span>    <span class="token comment" spellcheck="true"># return (temp,wetness)</span>    <span class="token keyword">return</span> temp<span class="token punctuation">,</span>wetness<span class="token comment" spellcheck="true"># 元组</span>result <span class="token operator">=</span> measure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需要单独的处理温度或者湿度 - 要记住索引值不方便</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果函数返回的类型是元组，同时希望单独地处理元组中的元素</span><span class="token comment" spellcheck="true"># 可以使用多个变量， 一次接收函数的返回结果</span><span class="token comment" spellcheck="true"># 注意：使用多个变量接收结果时，变量的个数应该和元组中元素的个数保持一致</span>gl_temp<span class="token punctuation">,</span>gl_wetness <span class="token operator">=</span> measure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_temp<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gl_wetness<span class="token punctuation">)</span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdy9gsalasj30ao0iumy1.jpg" alt=""></p><h2 id="交换两个数字"><a href="#交换两个数字" class="headerlink" title="交换两个数字"></a>交换两个数字</h2><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">6</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token comment" spellcheck="true"># 解法1 - 使用其它变量</span>c <span class="token operator">=</span> aa <span class="token operator">=</span> bb <span class="token operator">=</span> c<span class="token comment" spellcheck="true"># 解法2 - 不使用其它变量</span>a <span class="token operator">=</span> a <span class="token operator">+</span> bb <span class="token operator">=</span> a <span class="token operator">-</span> ba <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token comment" spellcheck="true"># 解法3 -python专有</span><span class="token comment" spellcheck="true"># a,b = (b,a)</span><span class="token comment" spellcheck="true"># 提示：等号右边是一个元组，只是把小括号省略了</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p><strong>输出为</strong></p><p><code>100</code></p><p><code>6</code></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_进阶_01</title>
      <link href="/2020/04/18/1056.html"/>
      <url>/2020/04/18/1056.html</url>
      
        <content type="html"><![CDATA[<h1 id="变量的引用"><a href="#变量的引用" class="headerlink" title="变量的引用"></a>变量的引用</h1><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在函数内部%d对应的内存地址是%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span>id<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义一个字符串变量</span>    result <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数要返回数据的内存地址是 %d"</span> <span class="token operator">%</span> id<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将字符串变量返回，返回的是数据的引用，而不是数据本身</span>    <span class="token keyword">return</span> result<span class="token comment" spellcheck="true"># 定义一个数字的变量</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true"># 数据的地址本质上就是一个数字</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 变量保存数据的内存地址是%d"</span> <span class="token operator">%</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用test函数，本质上传递的是实惨保存数据的引用，而不是实惨保存的数据！</span><span class="token comment" spellcheck="true"># 如果函数有返回值，但是没有定义变量接受</span><span class="token comment" spellcheck="true"># 程序不会报错，但是无法获得返回结果</span>r <span class="token operator">=</span> test<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s的内存地址是%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>r<span class="token punctuation">,</span>id<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>不可变类型</p><ol><li>数字</li><li>字符</li><li>元组</li></ol></li><li><p>可变类型</p><ol><li><p>列表</p></li><li><p>字典</p><p> <code>方法不会改变数据的地址,而赋值会改变</code></p></li></ol></li></ul><p>==不可变类型可以作为字典的key, 可变类型不行==</p><p><strong>局部变量就是函数内部的变量, 只能在函数内部使用</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义一个局部变量</span>    <span class="token comment" spellcheck="true"># 1> 出生：执行下方的代码之后才会被创建</span>    <span class="token comment" spellcheck="true"># 2> 死亡：函数执行完成之后</span>    num <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在demo1函数内部的变量是%d"</span> <span class="token operator">%</span> num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print("%d" % num)</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 在函数内部定义的变量，不能在其它位置使用</span><span class="token comment" spellcheck="true"># print("%d" % num)</span>demo1<span class="token punctuation">(</span><span class="token punctuation">)</span>demo2<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>全局变量</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 注意：在开发时，应该把模块中的所有全局变量</span><span class="token comment" spellcheck="true"># 定义在所有函数上方,就可以保证所有的函数</span><span class="token comment" spellcheck="true"># 都能够正常的访问到每一个全局变量了</span><span class="token comment" spellcheck="true"># 定义一个全局变量(函数外部的变量)</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">def</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 希望修改全局变量的值 - 使用 global 声明一下变量即可</span>    <span class="token comment" spellcheck="true"># global 关键字会告诉解释器后面的变量是一个全局变量</span>    <span class="token comment" spellcheck="true"># 再使用赋值语句时，就不会创建局部变量</span>    <span class="token keyword">global</span> num    num <span class="token operator">=</span> <span class="token number">99</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"demo1==>%d"</span> <span class="token operator">%</span> num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s"</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"demo2==>%d"</span> <span class="token operator">%</span> num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s"</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>demo1<span class="token punctuation">(</span><span class="token punctuation">)</span>demo2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 再定义一个全局变量</span>name <span class="token operator">=</span> <span class="token string">"小明"</span></code></pre><p><strong>全局变量在函数调用后时会报错</strong></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdy8s2daiej31u206ojt0.jpg" alt=""></p><p>在定义全局变量时,可在名字前加<code>g</code>或者<code>gl</code>的前缀</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_20</title>
      <link href="/2020/04/17/36121.html"/>
      <url>/2020/04/17/36121.html</url>
      
        <content type="html"><![CDATA[<h1 id="名片管理系统"><a href="#名片管理系统" class="headerlink" title="名片管理系统"></a>名片管理系统</h1><a id="more"></a><h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><ul><li><p>创建一个<code>cards_main.py</code>文件</p><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true">#! /Users/zhangzhongnan/Anaconda/anaconda3/bin/python3</span>  <span class="token keyword">import</span> cards_tools  <span class="token comment" spellcheck="true"># 无限循环，由用户主动决定什么时候退出循环</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># TODO(小明) 显示功能菜单</span>      cards_tools<span class="token punctuation">.</span>show_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>      action_str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请选择希望执行的操作："</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不使用int是为了防止输入非数字型时程序报错</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您选择的操作是[%s]"</span> <span class="token operator">%</span> action_str<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 1,2,3 针对名片的操作</span>      <span class="token keyword">if</span> action_str <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 使用in针对列表判断</span>          <span class="token comment" spellcheck="true"># 新增名片</span>          <span class="token keyword">if</span> action_str <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>             cards_tools<span class="token punctuation">.</span>new_card<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># pass</span>          <span class="token comment" spellcheck="true"># 显示全部</span>          <span class="token keyword">if</span> action_str <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span>             cards_tools<span class="token punctuation">.</span>show_all<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># pass</span>          <span class="token comment" spellcheck="true"># 查询名片</span>          <span class="token keyword">if</span> action_str <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">:</span>             cards_tools<span class="token punctuation">.</span>search_card<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># pass</span>          <span class="token comment" spellcheck="true"># pass</span>      <span class="token comment" spellcheck="true"># 0 退出系统</span>      <span class="token keyword">elif</span> action_str <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎再次使用【名片管理系统】"</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>          <span class="token keyword">pass</span>          <span class="token comment" spellcheck="true"># 如果在开发程序时，不希望立刻编写分支内部的代码</span>          <span class="token comment" spellcheck="true"># 可以使用pass关键字，表示一个占位符，能够保证程序的代码结构正确！</span>          <span class="token comment" spellcheck="true"># 程序运行时，pass关键字不会执行任何的操作</span>          <span class="token comment" spellcheck="true"># pass</span>      <span class="token comment" spellcheck="true"># 其它内容输入错误，需要提示用户</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您输入的不正确，请重新选择"</span><span class="token punctuation">)</span></code></pre></li><li><p>同时创建一个<code>cards_tools.py</code>文件</p><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># 记录所有的名片字典</span>  card_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">def</span> <span class="token function">show_menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""显示菜单"""</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎使用【名片管理系统】V 1.0"</span><span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出一个空行</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1. 新增名片"</span><span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2. 显示全部"</span><span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3. 搜索名片"</span><span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0. 退出系统"</span><span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">new_card</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""新增名片"""</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"新增名片"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 1. 提示用户输入名片的详细信息</span>       name_str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入姓名："</span><span class="token punctuation">)</span>       phone_str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入电话："</span><span class="token punctuation">)</span>       qq_str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入QQ："</span><span class="token punctuation">)</span>       email_str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入邮箱："</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 2. 使用用户输入的信息建立一个名片字典</span>       card_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span>name_str<span class="token punctuation">,</span><span class="token string">"phone"</span><span class="token punctuation">:</span>phone_str<span class="token punctuation">,</span><span class="token string">"qq"</span><span class="token punctuation">:</span>qq_str<span class="token punctuation">,</span><span class="token string">"email"</span><span class="token punctuation">:</span>email_str<span class="token punctuation">}</span>   <span class="token comment" spellcheck="true"># 3.将名片字典添加到列表中</span>       card_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>card_dict<span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>card_list<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 4. 提示用户添加成功</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"添加%s的名片成功"</span> <span class="token operator">%</span> name_str<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">show_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""显示所有名片"""</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"显示所有名片"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 判断是否存在名片记录，如果没有，提示用户并且返回</span>       <span class="token keyword">if</span> len<span class="token punctuation">(</span>card_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前没有任何名片记录，请使用新增功能添加名片！"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 可以返回一个函数的执行结果</span>            <span class="token comment" spellcheck="true"># 下方的代码不会执行</span>            <span class="token comment" spellcheck="true"># 如果 return 后面没有任何的内容，表示会返回到调用函数的位置并且不返回任何结果</span>            <span class="token keyword">return</span>       <span class="token comment" spellcheck="true"># 打印表头</span>       <span class="token keyword">for</span> name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"姓名"</span><span class="token punctuation">,</span><span class="token string">"电话"</span><span class="token punctuation">,</span><span class="token string">"QQ"</span><span class="token punctuation">,</span><span class="token string">"邮箱"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">'\t\t'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># TODO end = '' 实现不换行,这里不要使用双引号</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 空行实现换行</span>       <span class="token comment" spellcheck="true"># 打印分割线</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 遍历名片列表依次输出字典信息</span>       <span class="token keyword">for</span> card_dict <span class="token keyword">in</span> card_list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s\t\t%s\t\t%s\t\t%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>card_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                           card_dict<span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                           card_dict<span class="token punctuation">[</span><span class="token string">"qq"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                           card_dict<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">search_card</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""搜索名片"""</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"搜索名片"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 提示用户输入要搜索的姓名</span>       find_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入要搜索的姓名："</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 遍历名片列表，查询要搜索的姓名，如果没有找到，需要提示用户</span>       <span class="token keyword">for</span> card_dict <span class="token keyword">in</span> card_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> card_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">==</span> find_name<span class="token punctuation">:</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'姓名\t\t电话\t\tQQ\t\t邮箱'</span><span class="token punctuation">)</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s\t\t%s\t\t%s\t\t%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>card_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                 card_dict<span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                 card_dict<span class="token punctuation">[</span><span class="token string">"qq"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                 card_dict<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 针对找到的名片记录进行修改和删除的操作</span>                 deal_card<span class="token punctuation">(</span>card_dict<span class="token punctuation">)</span>                 <span class="token keyword">break</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"抱歉，没有找到%s"</span> <span class="token operator">%</span> find_name<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">deal_card</span><span class="token punctuation">(</span>find_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""       :param find_dict: 查找到的名片       """</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>find_dict<span class="token punctuation">)</span>       action_str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请选择要执行的操作 "</span>                          <span class="token string">"[1] 修改 [2] 删除 [0] 返回上级菜单"</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> action_str <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>            find_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> input_card_info<span class="token punctuation">(</span>find_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"姓名："</span><span class="token punctuation">)</span>            find_dict<span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span> <span class="token operator">=</span> input_card_info<span class="token punctuation">(</span>find_dict<span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"电话："</span><span class="token punctuation">)</span>            find_dict<span class="token punctuation">[</span><span class="token string">"qq"</span><span class="token punctuation">]</span> <span class="token operator">=</span> input_card_info<span class="token punctuation">(</span>find_dict<span class="token punctuation">[</span><span class="token string">"qq"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"QQ："</span><span class="token punctuation">)</span>            find_dict<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span> <span class="token operator">=</span> input_card_info<span class="token punctuation">(</span>find_dict<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"邮箱："</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"修改名片"</span><span class="token punctuation">)</span>       <span class="token keyword">elif</span> action_str <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span>            card_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>find_dict<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除名片成功"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">input_card_info</span><span class="token punctuation">(</span>dict_value<span class="token punctuation">,</span>tip_message<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""输入名片信息       :param dict_value: 字典中原有的值       :param tip_message: 输入的提示文字       :return: 如果用户输入了内容，就返回内容，否则返回字典中原有的值       """</span>       <span class="token comment" spellcheck="true"># 提示用户输入内容</span>       result_str <span class="token operator">=</span> input<span class="token punctuation">(</span>tip_message<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 针对用户的输入进行判断，如果用户输入了内容，直接返回结果</span>       <span class="token keyword">if</span> len<span class="token punctuation">(</span>result_str<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> result_str       <span class="token comment" spellcheck="true"># 如果用户没有输入内容，返回'字典中原有的值'</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> dict_value</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_19</title>
      <link href="/2020/04/17/31705.html"/>
      <url>/2020/04/17/31705.html</url>
      
        <content type="html"><![CDATA[<h1 id="完整的for循环"><a href="#完整的for循环" class="headerlink" title="完整的for循环"></a>完整的for循环</h1><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果循环体内部使用break退出循环</span>    <span class="token comment" spellcheck="true"># else 下方的代码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"会执行么？"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 不会执行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环结束"</span><span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdwwl2yamoj307006ymx7.jpg" alt=""></p><h3 id="for-else搜索字典列表"><a href="#for-else搜索字典列表" class="headerlink" title="for else搜索字典列表"></a>for else搜索字典列表</h3><pre class=" language-python"><code class="language-python">students <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"小美"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"阿土"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 在学员列表中搜索指定的姓名</span>find_name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token keyword">for</span> stu_dict <span class="token keyword">in</span> students<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stu_dict<span class="token punctuation">)</span>    <span class="token keyword">if</span> stu_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">==</span> find_name<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"找到了 %s"</span> <span class="token operator">%</span> find_name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果已经找到，应该直接退出循环，而不再遍历后续的元素</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果希望在搜索列表时，所有的字典检查之后，都没有发现需要搜索的目标</span>    <span class="token comment" spellcheck="true"># 还需要得到一个统一的提示</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"抱歉没有找到 %s"</span> <span class="token operator">%</span> find_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环结束"</span><span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdwx1xuv8mj30ew09yaaq.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_18</title>
      <link href="/2020/04/17/47896.html"/>
      <url>/2020/04/17/47896.html</url>
      
        <content type="html"><![CDATA[<h1 id="字符串的基本使用"><a href="#字符串的基本使用" class="headerlink" title="字符串的基本使用"></a>字符串的基本使用</h1><p>​    <a id="more"></a></p><h3 id="字符串的操作"><a href="#字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h3><ul><li>在python交互界面定义一个字符串，例如：<code>hello_str = &quot;&quot;</code></li><li>输入<code>hello_str.</code>按下TAB键，交互界面就会提供字符串的所有操作方法</li></ul><h5 id="字符串操作演练-1"><a href="#字符串操作演练-1" class="headerlink" title="字符串操作演练-1"></a>字符串操作演练-1</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断空白字符</span><span class="token comment" spellcheck="true"># \t是对齐符，\n是换行符，\r是回车符，这些都是空白字符</span>space_str <span class="token operator">=</span> <span class="token string">"   \t\n\r"</span><span class="token keyword">print</span><span class="token punctuation">(</span>space_str<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 判断字符串中只包含数字</span>num_str <span class="token operator">=</span> <span class="token string">"1"</span><span class="token comment" spellcheck="true"># 都不能判断小数</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">.</span>isdecimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 只判断阿拉伯数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 除阿拉伯数字外还可判断特殊字符，比如unicode字符串"\u00b2"</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">.</span>isnumeric<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 除 isdigit 的功能外，还可以判断中文数字</span><span class="token comment" spellcheck="true"># 字符串的查找和替换</span>hello_str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token comment" spellcheck="true"># 判断是否以指定字符串开始</span><span class="token keyword">print</span><span class="token punctuation">(</span>hello_str<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 判断是否以指定字符串结尾</span><span class="token keyword">print</span><span class="token punctuation">(</span>hello_str<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查找指定字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>hello_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"llo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># index同样可以查找指定的字符串在大字符串中的索引,但是字符串不存在，find方法会返回-1</span><span class="token keyword">print</span><span class="token punctuation">(</span>hello_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 替换字符串</span>hello_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token string">"python"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># replace方法执行完成后，会返回一个新的字符串，但是不会修改原有的字符串内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>hello_str<span class="token punctuation">)</span></code></pre><h5 id="字符串操作演练-2"><a href="#字符串操作演练-2" class="headerlink" title="字符串操作演练-2"></a>字符串操作演练-2</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 要求：顺序并且居中对齐输出以下内容</span>poem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"登鹳雀楼"</span><span class="token punctuation">,</span>        <span class="token string">"王之涣"</span><span class="token punctuation">,</span>        <span class="token string">"白日依山尽"</span><span class="token punctuation">,</span>        <span class="token string">"黄河入海楼"</span><span class="token punctuation">,</span>        <span class="token string">"欲穷千里目"</span><span class="token punctuation">,</span>        <span class="token string">"更上一层楼"</span><span class="token punctuation">]</span> <span class="token keyword">for</span> poem_str <span class="token keyword">in</span> poem<span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"|%s|"</span> <span class="token operator">%</span> poem_str<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ||是参考线</span><span class="token comment" spellcheck="true"># 向左对齐</span><span class="token comment" spellcheck="true"># for poem_str in poem:</span>    <span class="token comment" spellcheck="true"># print("|%s|" % poem_str.ljust(10," "))</span><span class="token comment" spellcheck="true"># 向右对齐</span><span class="token comment" spellcheck="true"># for poem_str in poem:</span>    <span class="token comment" spellcheck="true"># print("|%s|" % poem_str.rjust(10," "))</span></code></pre><h5 id="字符串操作演练-3"><a href="#字符串操作演练-3" class="headerlink" title="字符串操作演练-3"></a>字符串操作演练-3</h5><pre class=" language-python"><code class="language-python">poem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"\t\n登鹳雀楼"</span><span class="token punctuation">,</span>        <span class="token string">"王之涣"</span><span class="token punctuation">,</span>        <span class="token string">"白日依山尽\t\n"</span><span class="token punctuation">,</span>        <span class="token string">"黄河入海楼"</span><span class="token punctuation">,</span>        <span class="token string">"欲穷千里目"</span><span class="token punctuation">,</span>        <span class="token string">"更上一层楼"</span><span class="token punctuation">]</span><span class="token keyword">for</span> poem_str <span class="token keyword">in</span> poem<span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 先使用strip方法去除字符串中的空白字符</span>     <span class="token comment" spellcheck="true"># 再使用center方法居中显示文本</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"|%s|"</span> <span class="token operator">%</span> poem_str<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="字符串操作演练-4"><a href="#字符串操作演练-4" class="headerlink" title="字符串操作演练-4"></a>字符串操作演练-4</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字符串的拆分和合并</span>poem_str <span class="token operator">=</span> <span class="token string">"登鹳雀楼\t 王之涣 \t 白日依山尽 \t \n 黄河入海楼 \t\t 欲穷千里目 \n 更上一层楼"</span><span class="token keyword">print</span><span class="token punctuation">(</span>poem_str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 拆分字符串</span>poem_list <span class="token operator">=</span> poem_str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>poem_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 合并字符串</span>result <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>poem_list<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用" "作为分隔符</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_17</title>
      <link href="/2020/04/17/48984.html"/>
      <url>/2020/04/17/48984.html</url>
      
        <content type="html"><![CDATA[<h1 id="字典的基本使用"><a href="#字典的基本使用" class="headerlink" title="字典的基本使用"></a>字典的基本使用</h1><a id="more"></a><ul><li><p>字典和列表的区别</p><p>  <code>列表</code>是<strong>有序</strong>的数据集合</p><p>  <code>字典</code>是<strong>无序</strong>的数据集合</p></li><li><p>字典使用大括号<code>{}</code>定义</p></li><li><p>字典使用<code>键值对</code>存储数据，键值对之间使用<code>,</code>分隔</p><p>  <strong>键</strong><code>key</code>是索引</p><p>  <strong>值</strong><code>value</code>是数据</p><p>  <strong>键</strong>和<strong>值</strong>之间用<code>:</code>分隔</p><p>  <strong>键</strong>必须是唯一的</p><p>  <strong>值</strong>可以取任何数据类型，但<strong>键</strong>只能使用<strong>字符串</strong>、<strong>数字</strong>或者<strong>元组</strong></p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字典是一个无序的数据集合，使用print函数输出字典时，通常</span><span class="token comment" spellcheck="true"># 输出的顺序和定义的顺序是不一致的！</span>xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>            <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>            <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token number">75.5</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdwrfhq8l8j31b80263yu.jpg" alt=""></p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字典是一个无序的数据集合，使用print函数输出字典时，通常</span><span class="token comment" spellcheck="true"># 输出的顺序和定义的顺序是不一致的！</span>xiaoming_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 取值</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 增加/修改</span><span class="token comment" spellcheck="true"># 如果key不存在，会新增键值对</span>xiaoming_dict<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token comment" spellcheck="true"># 如果key存在，会修改已存在的键值对</span>xiaoming_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> 小小明<span class="token comment" spellcheck="true"># 删除</span>xiaoming_dict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 键值对数量</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>xiaoming_dict<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 合并字典</span>temp_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">1.75</span><span class="token punctuation">,</span>             <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#  如果被合并的字典中包含已经存在的键值对时，会覆盖原有对键值对</span>xiaoming_dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>temp_dict<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 清空字典</span>xiaoming_dict<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming_dict<span class="token punctuation">)</span></code></pre><h2 id="字典的循环遍历"><a href="#字典的循环遍历" class="headerlink" title="字典的循环遍历"></a>字典的循环遍历</h2><pre class=" language-python"><code class="language-python">xiaoming_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span>                 <span class="token string">"qq"</span><span class="token punctuation">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>                 <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"10086"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 迭代遍历字典</span><span class="token comment" spellcheck="true"># 变量k是每一次循环中，获取到的键值对的key</span><span class="token keyword">for</span> k <span class="token keyword">in</span> xiaoming_dict<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s - %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span>xiaoming_dict<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdwryaf9kij30fe068aad.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_16</title>
      <link href="/2020/04/17/32665.html"/>
      <url>/2020/04/17/32665.html</url>
      
        <content type="html"><![CDATA[<h1 id="元组的基本使用"><a href="#元组的基本使用" class="headerlink" title="元组的基本使用"></a>元组的基本使用</h1><a id="more"></a><h2 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h2><p><code>元组内的元素可以是不同类型，且元组不可修改</code></p><pre class=" language-python"><code class="language-python">info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">1.75</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取值和取索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>info_tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 已经知道数据的内容，希望知道该数据在元组中的索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>info_tuple<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 统计计数</span><span class="token keyword">print</span><span class="token punctuation">(</span>info_tuple<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 统计元组中包含元素的个数</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>info_tuple<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>注意创建只包含一个元素的元组需要加一个逗号</code></p><pre class=" language-python"><code class="language-python">info_tuple<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 因为元组和列表类似，以逗号隔开各个元素，但是不加逗号会使数据类型是int类型</span></code></pre><h2 id="格式化字符串的扩展"><a href="#格式化字符串的扩展" class="headerlink" title="格式化字符串的扩展"></a>格式化字符串的扩展</h2><pre class=" language-python"><code class="language-python">info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">1.85</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 格式化字符串后面的`()`本质上就是元组</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 年龄是%d,身高是%.2f"</span> <span class="token operator">%</span> info_tuple<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 换种写法，将括号内的内容赋予一个变量</span>info_str <span class="token operator">=</span> <span class="token string">"%s 年龄是%d,身高是%.2f"</span> <span class="token operator">%</span> info_tuple<span class="token keyword">print</span><span class="token punctuation">(</span>info_str<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdwquazm12j30je04o74p.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_15</title>
      <link href="/2020/04/16/32473.html"/>
      <url>/2020/04/16/32473.html</url>
      
        <content type="html"><![CDATA[<h1 id="列表的基本使用"><a href="#列表的基本使用" class="headerlink" title="列表的基本使用"></a>列表的基本使用</h1><a id="more"></a><p><code>列表相当于其它程序语言中的数组</code></p><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 取值和索引</span><span class="token comment" spellcheck="true"># list index out of range - 列表索引超出范围</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 知道数据的内容，想确定数据在列表中的位置</span><span class="token comment" spellcheck="true"># 使用index方法需要注意，如果传递的数据不在列表中，程序会报错！</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改</span>name_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token comment" spellcheck="true"># 增加</span>name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"王小二"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># append 方法可以向列表的末尾追加数据</span>name_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"小美眉"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># insert方法可以在列表的指定位置插入数据</span>temp_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string">"猪二哥"</span><span class="token punctuation">,</span><span class="token string">"沙师弟"</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把另一个列表的完整内容追加到当前列表的末尾</span><span class="token comment" spellcheck="true"># 删除</span>name_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 从列表中删除指定的数据</span>name_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 默认把列表中最后一个元素删掉，可以指定要删除元素的索引</span>name_list<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 可以清空列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span></code></pre><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使用del 关键字（delete）删除列表元素</span><span class="token comment" spellcheck="true"># 提示：在日常开发中，要从列表删除数据，建议使用列表提供的方法</span><span class="token keyword">del</span> name_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># del 关键字本质上是用来将一个变量从内存中删除的</span></code></pre><h2 id="列表的其它用处"><a href="#列表的其它用处" class="headerlink" title="列表的其它用处"></a>列表的其它用处</h2><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># len(length长度)函数可以统计列表中元素的总数</span>list_len <span class="token operator">=</span> len<span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表中包含%d个元素"</span> <span class="token operator">%</span> list_len<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># count 方法可以统计列表中某一个数据出现的次数</span>count <span class="token operator">=</span> name_list<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"张三出现了%d次"</span> <span class="token operator">%</span> count<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从列表中删除第一次出现的数据，如果数据不存在，程序会报错</span>name_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 只会删除第一个张三</span></code></pre><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">]</span>num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 升序</span>name_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>num_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 降序</span><span class="token comment" spellcheck="true"># name_list.sort(reverse=True)</span><span class="token comment" spellcheck="true"># num_list.sort(reverse=True)</span><span class="token comment" spellcheck="true"># 逆序</span><span class="token comment" spellcheck="true"># name_list.reverse()</span><span class="token comment" spellcheck="true"># num_list.reverse()</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdvzviu6u6j30pa05074j.jpg" alt=""></p><h2 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h2><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使用迭代遍历列表，在循环体内部，针对列表中的每一项元素执行相同的操作</span><span class="token triple-quoted-string string">"""顺序地从列表中依次获取数据，每一次循环过程中，数据都会保存在my_name 这个变量中，在循环体内部都可以访问到当前这一次获取到的数据"""</span><span class="token keyword">for</span> my_name <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># in 后的就是要遍历的列表</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我的名字叫%s"</span> <span class="token operator">%</span> my_name<span class="token punctuation">)</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdw0ciyul1j30cu08u0td.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_14</title>
      <link href="/2020/04/16/48664.html"/>
      <url>/2020/04/16/48664.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h1><a id="more"></a><h2 id="实战演练-打印分隔符"><a href="#实战演练-打印分隔符" class="headerlink" title="实战演练-打印分隔符"></a>实战演练-打印分隔符</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_line</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 定义第一个函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>char <span class="token operator">*</span> times<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">print_lines</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 定义第二个函数</span>    row <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> row <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>        print_line<span class="token punctuation">(</span>char<span class="token punctuation">,</span>times<span class="token punctuation">)</span>        row <span class="token operator">+=</span> <span class="token number">1</span>print_lines<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 两个实参会先传递到函数print_lines的形参，紧接着作为变量继续传递到函数print_line的形参</span></code></pre><p><code>输出为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdvt8ij01yj316q0bm3yq.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_13</title>
      <link href="/2020/04/16/31833.html"/>
      <url>/2020/04/16/31833.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数参数的使用"><a href="#函数参数的使用" class="headerlink" title="函数参数的使用"></a>函数参数的使用</h1><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_2_num</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># num1和num2是形参</span>    <span class="token triple-quoted-string string">"""对两个数字的求和"""</span>    result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d +%d = %d"</span> <span class="token operator">%</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>sum_2_num<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1和2是实参</span></code></pre><p>输出为<code>1 + 2 =3</code></p><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_2_num</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""对两个数字的求和"""</span>    result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2    <span class="token comment" spellcheck="true"># 可以使用返回值，告诉调用函数一方计算的结果</span>    <span class="token keyword">return</span> result    <span class="token comment" spellcheck="true"># 注意：return就表示返回，下方的代码不会被执行</span><span class="token comment" spellcheck="true"># 可以使用变量，来接收函数执行的返回结果</span>sum_result <span class="token operator">=</span> sum_2_num<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"计算结果：%d"</span> <span class="token operator">%</span> sum_result<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python-基础-12</title>
      <link href="/2020/04/16/18075.html"/>
      <url>/2020/04/16/18075.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h1><p>​    <a id="more"></a></p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    函数封装的代码    ······</code></pre><ol><li><p><code>def</code>是英文define的缩写</p></li><li><p><strong>函数名称</strong>应该能够表达<strong>函数封装代码</strong>的功能，方便后续的调用</p></li><li><p><strong>函数名称</strong>的命名应该符合<strong>标识符的命名规则</strong></p><p> ==标识符可以由字母、下划线和数字组成==</p><p> ==不能以数字开头==</p><p> ==不能与关键字开头==                   </p></li></ol><h2 id="封装演练"><a href="#封装演练" class="headerlink" title="封装演练"></a>封装演练</h2><ul><li>第一步</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multiple_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 冒号换行后要缩进</span>    <span class="token triple-quoted-string string">"""九九乘法表"""</span>  <span class="token comment" spellcheck="true">#这是函数注释的格式要求</span>    row <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> row <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span>        col <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> col <span class="token operator">&lt;=</span> row<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print("*", end=" ")</span>            <span class="token comment" spellcheck="true"># 乘号前的数字是列，乘号后的数字是行，结果是列*行</span>            <span class="token comment" spellcheck="true"># end=后的""里加个\t是为了协助文本输出时垂直方向保持对齐</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>col<span class="token punctuation">,</span>row<span class="token punctuation">,</span>col<span class="token operator">*</span>row<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\t"</span><span class="token punctuation">)</span>            col <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        row <span class="token operator">+=</span> <span class="token number">1</span>multiple_table<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><p>第二步-输入函数  </p><p>  #新建<code>.py</code>项目</p><pre class=" language-python"><code class="language-python">  <span class="token keyword">import</span> zn_08函数  <span class="token comment" spellcheck="true"># zn_08函数是第一步的项目，是一个模块名</span>  zn_08函数<span class="token punctuation">.</span>multiple_table<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>通过<code>函数名()</code>即可完成对函数的调用</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_11</title>
      <link href="/2020/04/14/48600.html"/>
      <url>/2020/04/14/48600.html</url>
      
        <content type="html"><![CDATA[<h1 id="字符串中的转义字符"><a href="#字符串中的转义字符" class="headerlink" title="字符串中的转义字符"></a>字符串中的转义字符</h1><a id="more"></a><ul><li><code>\t</code>在控制台输出一个制表符，协助在输出文本时<strong>垂直方向</strong>保持对齐</li><li><code>\n</code>在控制台输出一个<strong>换行符</strong></li><li><code>\&quot;</code><strong>双引号</strong></li></ul><blockquote><p><strong>制表符</strong>的功能是在不使用表格的情况下在<strong>垂直方向</strong>按列对齐文本</p></blockquote><p>其它转义字符可点击<a href="https://www.jianshu.com/p/7be4ad916a89" target="_blank" rel="noopener">转义字符</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_10</title>
      <link href="/2020/04/14/32025.html"/>
      <url>/2020/04/14/32025.html</url>
      
        <content type="html"><![CDATA[<h1 id="while-循环嵌套"><a href="#while-循环嵌套" class="headerlink" title="while 循环嵌套"></a>while 循环嵌套</h1><a id="more"></a><h2 id="print-结尾处理"><a href="#print-结尾处理" class="headerlink" title="print 结尾处理"></a>print 结尾处理</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在默认情况下， print函数输出内容后，会自动在内容末尾增加换行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span></code></pre><p>输出结果为<code>**</code></p><h2 id="循环嵌套演练"><a href="#循环嵌套演练" class="headerlink" title="循环嵌套演练"></a>循环嵌套演练</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打印如下内容</span><span class="token triple-quoted-string string">'''***************'''</span>row <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 开始第一个循环</span><span class="token keyword">while</span> row <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 每一行打印的星星和当前的行数一致</span>    <span class="token comment" spellcheck="true"># 增加一个小的循环，专门负责当前行中每一`列`的星星显示</span>    <span class="token comment" spellcheck="true"># 定义一个列计数器变量</span>    col <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 开始第二个循环</span>    <span class="token keyword">while</span> col <span class="token operator">&lt;=</span> row<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print("%d" % col)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># end=""表示不换行</span>        col <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># print("第%d行" % row)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这行代码的目的，就是在一行星星输出完成之后，添加换行</span>    row <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p><code>输出结果为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdtnesth21j30aq0as3yl.jpg" alt=""></p><h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="==九九乘法表=="></a>==九九乘法表==</h2><pre class=" language-python"><code class="language-python">row <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> row <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span>    col <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> col <span class="token operator">&lt;=</span> row<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print("*", end=" ")</span>        <span class="token comment" spellcheck="true"># 乘号前的数字是列，乘号后的数字是行，结果是列*行</span>        <span class="token comment" spellcheck="true"># end=后的""里加个\t是为了协助文本输出时垂直方向保持对齐</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>col<span class="token punctuation">,</span>row<span class="token punctuation">,</span>col<span class="token operator">*</span>row<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\t"</span><span class="token punctuation">)</span>        col <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    row <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p><code>输出结果为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdtokq2d6vj32by0jq77d.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_09</title>
      <link href="/2020/04/14/60376.html"/>
      <url>/2020/04/14/60376.html</url>
      
        <content type="html"><![CDATA[<h1 id="break和continue函数"><a href="#break和continue函数" class="headerlink" title="break和continue函数"></a>break和continue函数</h1><a id="more"></a><h2 id="break函数"><a href="#break函数" class="headerlink" title="break函数"></a>break函数</h2><p><strong>某一条件满足时，退出循环，不再执行后续重复的代码</strong></p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 开始循环</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 处理计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span></code></pre><p><code>输出结果为:</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdtlk5gyinj311206kmxa.jpg" alt=""></p><h2 id="continue函数"><a href="#continue函数" class="headerlink" title="continue函数"></a>continue函数</h2><p><strong>某一条件满足时，不执行后续重复的代码</strong></p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 开始循环</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># continue 某一条件满足时，不执行后续重复的代码</span>    <span class="token comment" spellcheck="true"># i == 3</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 注意: 在循环中，如果使用continue这个关键字</span>        <span class="token comment" spellcheck="true"># 在使用关键字之前，需要确认循环的计数是否修改</span>        <span class="token comment" spellcheck="true"># 否则可能会导致死循环</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 处理计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span></code></pre><p><code>输出结果为</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdtly8fy8ej30ak0jaglv.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_08</title>
      <link href="/2020/04/14/11033.html"/>
      <url>/2020/04/14/11033.html</url>
      
        <content type="html"><![CDATA[<h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><a id="more"></a><p>请点击<a href="https://www.runoob.com/python/python-operators.html" target="_blank" rel="noopener">赋值运算符</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_07</title>
      <link href="/2020/04/14/12121.html"/>
      <url>/2020/04/14/12121.html</url>
      
        <content type="html"><![CDATA[<h1 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h1><a id="more"></a><h2 id="while-语句基本语法"><a href="#while-语句基本语法" class="headerlink" title="while 语句基本语法"></a>while 语句基本语法</h2><pre class=" language-shell"><code class="language-shell">初始条件设置 —— 通常是重复执行的 计数器while 条件（判断 计数器 是否达到 目标次数）    条件满足时，做到事情1    条件满足时，做到事情2    条件满足时，做的事情3    ···（省略）···    处理条件（计数器 + 1）</code></pre><h2 id="第一个演练"><a href="#第一个演练" class="headerlink" title="第一个演练"></a>第一个演练</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打印 5 遍 Hello Python</span><span class="token comment" spellcheck="true"># 1. 定义一个整数变量，记录循环次数</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 2. 开始循环</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1> 希望在循环内执行的代码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello Python"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2> 处理计数器</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环结束后，i = %d"</span> <span class="token operator">%</span> i<span class="token punctuation">)</span></code></pre><h2 id="第二个演练-0-100之间数字累加求和"><a href="#第二个演练-0-100之间数字累加求和" class="headerlink" title="第二个演练 0~100之间数字累加求和"></a>第二个演练 <code>0~100之间数字累加求和</code></h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算0～100之间的所有数字的累计求和结果</span><span class="token comment" spellcheck="true"># 定义最终结果的变量</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">#定义一个整数的变量记录循环的次数</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 开始循环</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 求和</span>    result <span class="token operator">+=</span> i  <span class="token comment" spellcheck="true"># 等效于 result = result + i</span>    <span class="token comment" spellcheck="true"># 处理计数器</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"求和结果=%d"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span></code></pre><h2 id="第三个演练0-100之间偶数累加求和"><a href="#第三个演练0-100之间偶数累加求和" class="headerlink" title="第三个演练0~100之间偶数累加求和"></a>第三个演练<code>0~100之间偶数累加求和</code></h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算0～100之间的所有偶数的累计求和结果</span><span class="token comment" spellcheck="true">#定义一个输出结果变量、</span>result <span class="token operator">=</span> <span class="token number">0</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 千万不要忘了加:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        result <span class="token operator">+=</span> i    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"偶数求和=%d"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> while </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_06</title>
      <link href="/2020/04/14/61336.html"/>
      <url>/2020/04/14/61336.html</url>
      
        <content type="html"><![CDATA[<h1 id="随机数的处理"><a href="#随机数的处理" class="headerlink" title="随机数的处理"></a>随机数的处理</h1><a id="more"></a><ul><li>在python中，要使用随机数，首先需要导入随机数的模块 – “工具包”</li></ul><pre class=" language-shell"><code class="language-shell">import random</code></pre><ul><li><p>导入模块后 ，可以直接在模块名称后敲一个<code>.</code>然后<code>Tab</code>键,会提示该模块中包含的所有函数</p></li><li><p><code>random.randint(a, b)</code>, 返回<code>[a, b]</code>之间的整数，包含<code>a</code>和<code>b</code></p></li><li><p>例如：</p><pre class=" language-shell"><code class="language-shell">  random.randint(12, 20) # 生成的随机数n：12 <= n <= 20  random.randint(20, 20) # 结果永远是20  random.randint(20, 12) # 语法是错误的，下限必须小于上限</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_05</title>
      <link href="/2020/04/14/61144.html"/>
      <url>/2020/04/14/61144.html</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑判断语句"><a href="#逻辑判断语句" class="headerlink" title="逻辑判断语句"></a>逻辑判断语句</h1><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个布尔型变量 is_employee. 编写代码判断是否是本公司员工</span>is_employee <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 如果不是提示不允许入内</span><span class="token comment" spellcheck="true"># 在开发中，通常希望某个条件不满足时，执行一些代码，可以使用not</span><span class="token comment" spellcheck="true"># 另外，如果需要拼接复杂的逻辑计算条件，同样也有可能使用not</span><span class="token keyword">if</span> <span class="token operator">not</span> is_employee    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"非本公司人员，请勿入内"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_04</title>
      <link href="/2020/04/13/11801.html"/>
      <url>/2020/04/13/11801.html</url>
      
        <content type="html"><![CDATA[<h1 id="判断-if-语句"><a href="#判断-if-语句" class="headerlink" title="判断(if)语句"></a>判断(if)语句</h1><a id="more"></a><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 要判断的条件<span class="token punctuation">:</span>    条件成立时，要做的事情</code></pre><h2 id="判断语句演练-–判断年龄"><a href="#判断语句演练-–判断年龄" class="headerlink" title="判断语句演练 –判断年龄"></a>判断语句演练 –判断年龄</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdsl0uukrrj31eu0k2goq.jpg" alt=""></p><h2 id="else语句-需要配合if使用"><a href="#else语句-需要配合if使用" class="headerlink" title="else语句  ## 需要配合if使用"></a>else语句  ## 需要配合if使用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 要判断的条件<span class="token punctuation">:</span>    条件成立时，要做的事情<span class="token keyword">else</span><span class="token punctuation">:</span>    条件不成立时，要做的事情</code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdsljti7r3j31dy0j8n15.jpg" alt=""></p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 如果不写int,age则为字符串不能直接与数字变量比较</span></code></pre><h1 id="if语句进阶"><a href="#if语句进阶" class="headerlink" title="if语句进阶"></a>if语句进阶</h1><h2 id="elif-配合if使用"><a href="#elif-配合if使用" class="headerlink" title="elif(配合if使用)"></a>elif(配合if使用)</h2><h3 id="当需要满足多个条件时，且每个条件的执行代码也不同时，就可以使用elif"><a href="#当需要满足多个条件时，且每个条件的执行代码也不同时，就可以使用elif" class="headerlink" title="当需要满足多个条件时，且每个条件的执行代码也不同时，就可以使用elif"></a>当需要满足多个条件时，且每个条件的执行代码也不同时，就可以使用elif</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义holiday_name 字符串变量记录节日名称</span>holiday_name <span class="token operator">=</span> <span class="token string">"中秋节"</span><span class="token comment" spellcheck="true"># 如果是 情人节 应该买 玫瑰/看电影</span><span class="token keyword">if</span> holiday_name <span class="token operator">==</span> <span class="token string">"情人节"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"买玫瑰"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"看电影"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果是 平安夜 应该 买苹果/吃大餐</span><span class="token keyword">elif</span> holiday_name <span class="token operator">==</span> <span class="token string">"平安夜"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"买苹果"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"吃大餐"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> holiday_name <span class="token operator">==</span> <span class="token string">"生日"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"买蛋糕"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果是 生日 应该 买蛋糕</span><span class="token comment" spellcheck="true"># 其它的日子每天都是节日啊···</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"每天都是节日啊"</span><span class="token punctuation">)</span></code></pre><h1 id="if-的嵌套"><a href="#if-的嵌套" class="headerlink" title="if 的嵌套"></a>if 的嵌套</h1><p>==<em>elif 同时判断的条件是平级的，而if 嵌套是在之前条件满足的基础上增加而外的条件</em>==</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义布尔型变量 has_ticket 表示是否有车票</span>has_ticket <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 定义整形变量 knife_length 表示刀的长度</span>knife_length <span class="token operator">=</span> <span class="token number">30</span><span class="token comment" spellcheck="true"># 首先检查是否有车票，有才允许安检</span><span class="token keyword">if</span> has_ticket<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"车票检查通过，准备开始安检"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 安检时需要检查刀的长度，判断是否超过20厘米</span>    <span class="token keyword">if</span> knife_length <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果刀的长度超过20厘米，提示刀的长度，不允许上车</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您携带的刀太长了，有%d公分长！"</span> <span class="token operator">%</span> knife_length<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果不超过20厘米，安检通过</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"安检已经通过，祝您旅途愉快！"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果没有车票，不允许进门</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大哥，请先买票"</span><span class="token punctuation">)</span></code></pre><h1 id="综合演练"><a href="#综合演练" class="headerlink" title="综合演练"></a>综合演练</h1><h3 id="石头剪刀布"><a href="#石头剪刀布" class="headerlink" title="石头剪刀布"></a>石头剪刀布</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入随机工具包</span><span class="token comment" spellcheck="true"># 注意：在导入工具包的时候，应该将导入的语句，放在文件的顶部</span><span class="token comment" spellcheck="true"># 因为这样可以方便下方的代码，在任何需要的时候使用工具包中的工具</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 从控制台输入要出的拳头 —— 石头(1)/剪刀(2)/布(3)</span>player <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入您要出的拳头 石头（1）/剪刀（2）/布（3）："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 电脑随机出拳</span>computer <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"玩家选择的拳头是%d - 电脑出的拳头是%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>player<span class="token punctuation">,</span> computer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 比较胜负</span><span class="token comment" spellcheck="true"># 1. 石头 胜 剪刀</span><span class="token comment" spellcheck="true"># 2. 剪刀 胜 布</span><span class="token comment" spellcheck="true"># 3. 布 胜 石头</span><span class="token keyword">if</span><span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欧耶，电脑弱爆了！"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 平均</span><span class="token keyword">elif</span> player <span class="token operator">==</span> computer<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"真是心有灵犀啊，再来一盘"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 其它情况都是电脑获胜</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不服气，我们决战到天明！"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''上述if判断语句太长，可以这么写：if (()        or ()        or ()):   ## or前面有8个空格为了防止print的执行'''</span></code></pre><p>输出结果如下：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdt99ugl6oj310c07gaba.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> if </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_03</title>
      <link href="/2020/04/13/60504.html"/>
      <url>/2020/04/13/60504.html</url>
      
        <content type="html"><![CDATA[<h1 id="python风格指南"><a href="#python风格指南" class="headerlink" title="python风格指南"></a>python风格指南</h1><a id="more"></a><p>请点击<a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/" target="_blank" rel="noopener">python风格指南</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_02</title>
      <link href="/2020/04/13/11417.html"/>
      <url>/2020/04/13/11417.html</url>
      
        <content type="html"><![CDATA[<h1 id="变量的格式化输出"><a href="#变量的格式化输出" class="headerlink" title="变量的格式化输出"></a>变量的格式化输出</h1><a id="more"></a><p>语法格式如下：</p><p>print(“格式化字符串” % 变量1)</p><p>print(“格式化字符串” % (变量1, 变量2, 变量3, ······))</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我的名字叫%s, 请多多关照!"</span> <span class="token operator">%</span> name<span class="token punctuation">)</span></code></pre><p>输出为</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdsj3qqhlqj31qy0bmq5h.jpg" alt=""></p><h2 id="格式化字符"><a href="#格式化字符" class="headerlink" title="格式化字符"></a>格式化字符</h2><table><thead><tr><th>格式化字符</th><th align="left">含义</th></tr></thead><tbody><tr><td>%s</td><td align="left">字符串</td></tr><tr><td>%d</td><td align="left">有符号十进制整数，%06d表示输出整数的显示位数，不足的地方使用0补全</td></tr><tr><td>%f</td><td align="left">浮点数，%.f表示小数点后只显示两位</td></tr><tr><td>%%</td><td align="left">输出%</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_基础_01</title>
      <link href="/2020/04/13/11737.html"/>
      <url>/2020/04/13/11737.html</url>
      
        <content type="html"><![CDATA[<h1 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a>python函数</h1><a id="more"></a><p>input函数</p><pre class=" language-shell"><code class="language-shell"># input("")  # input输出为字符串</code></pre><p>int(x) 将x转换为整数</p><pre class=" language-shell"><code class="language-shell"># int("12.3")</code></pre><p>float(x) 将x转换为小数</p><pre class=" language-shell"><code class="language-shell"># float("12")</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>下载网页视频</title>
      <link href="/2020/04/11/29689.html"/>
      <url>/2020/04/11/29689.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载网页视频（包括文献的movie）"><a href="#下载网页视频（包括文献的movie）" class="headerlink" title="下载网页视频（包括文献的movie）"></a>下载网页视频（包括文献的movie）</h1><a id="more"></a><pre class=" language-shell"><code class="language-shell"># wget 视频网址  ##不要用yum命令，yum一般用来下载package</code></pre><p>上述命令会下载视频到当前目录，然后用lrzsz下载到本地</p><h2 id="首先安装lrzsz"><a href="#首先安装lrzsz" class="headerlink" title="首先安装lrzsz"></a>首先安装lrzsz</h2><pre class=" language-shell"><code class="language-shell"># yum install lrzsz -y</code></pre><h3 id="使用sz命令下载视频，这里有个技巧，输入视频的开头字母然后按tab键会服务器自动补全名称"><a href="#使用sz命令下载视频，这里有个技巧，输入视频的开头字母然后按tab键会服务器自动补全名称" class="headerlink" title="使用sz命令下载视频，这里有个技巧，输入视频的开头字母然后按tab键会服务器自动补全名称"></a>使用sz命令下载视频，这里有个技巧，输入视频的开头字母然后按tab键会服务器自动补全名称</h3><pre class=" language-shell"><code class="language-shell"># sz mmc6.mp4  ## mmc6.mp4是我的视频名</code></pre>]]></content>
      
      
      <categories>
          
          <category> 下载网页视频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hero-g-报错</title>
      <link href="/2020/04/09/17705.html"/>
      <url>/2020/04/09/17705.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="新写的博客无法部署到网页"><a href="#新写的博客无法部署到网页" class="headerlink" title="新写的博客无法部署到网页"></a>新写的博客无法部署到网页</h1><p><strong>如下图</strong></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdnzi4o8q7j30xa04uwgu.jpg" alt=""></p><h2 id="可能是博客网页没有tag或者date网页，如下图"><a href="#可能是博客网页没有tag或者date网页，如下图" class="headerlink" title="可能是博客网页没有tag或者date网页，如下图"></a>可能是博客网页没有tag或者date网页，如下图</h2><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdnzk879noj30vg04u74h.jpg" alt=""></p><p>==只需要将标题中的tag和date删除即可==</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置远程计算机的别名</title>
      <link href="/2020/04/09/3284.html"/>
      <url>/2020/04/09/3284.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><blockquote><h1 id="配置远程计算机的别名"><a href="#配置远程计算机的别名" class="headerlink" title="配置远程计算机的别名"></a>配置远程计算机的别名</h1><h2 id="在～-ssh目录创建config文件"><a href="#在～-ssh目录创建config文件" class="headerlink" title="在～/ .ssh目录创建config文件"></a>在～/ .ssh目录创建config文件</h2><pre class=" language-shell"><code class="language-shell">cd ~/.sshtouch config  #创建config文件</code></pre><h2 id="在config文件中复制以下内容"><a href="#在config文件中复制以下内容" class="headerlink" title="在config文件中复制以下内容"></a>在config文件中复制以下内容</h2><p>​          Host los # los是远程计算机或者服务器的小名</p><p>​                  HostName IP地址</p><p>​                  User root # root是远程计算机或者服务器的用户名，root是服务器的一般用户名</p><p>​                  Port 22 # ssh的端口默认为22，也有例外</p><pre class=" language-shell"><code class="language-shell">ssh los #直接连接远程服务器或者计算机，可能需要用户密码</code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
